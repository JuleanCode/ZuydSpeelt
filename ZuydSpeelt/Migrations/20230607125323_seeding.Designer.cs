// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ZuydSpeelt;

#nullable disable

namespace ZuydSpeelt.Migrations
{
    [DbContext(typeof(ZuydSpeeltContext))]
    [Migration("20230607125323_seeding")]
    partial class seeding
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ZuydSpeelt.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Category");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "calculate"
                        },
                        new
                        {
                            Id = 2,
                            Name = "generate"
                        },
                        new
                        {
                            Id = 3,
                            Name = "back up"
                        },
                        new
                        {
                            Id = 4,
                            Name = "reboot"
                        },
                        new
                        {
                            Id = 5,
                            Name = "back up"
                        },
                        new
                        {
                            Id = 6,
                            Name = "parse"
                        },
                        new
                        {
                            Id = 7,
                            Name = "generate"
                        },
                        new
                        {
                            Id = 8,
                            Name = "transmit"
                        },
                        new
                        {
                            Id = 9,
                            Name = "program"
                        },
                        new
                        {
                            Id = 10,
                            Name = "bypass"
                        },
                        new
                        {
                            Id = 11,
                            Name = "synthesize"
                        },
                        new
                        {
                            Id = 12,
                            Name = "synthesize"
                        },
                        new
                        {
                            Id = 13,
                            Name = "bypass"
                        },
                        new
                        {
                            Id = 14,
                            Name = "back up"
                        },
                        new
                        {
                            Id = 15,
                            Name = "program"
                        },
                        new
                        {
                            Id = 16,
                            Name = "hack"
                        },
                        new
                        {
                            Id = 17,
                            Name = "copy"
                        },
                        new
                        {
                            Id = 18,
                            Name = "calculate"
                        },
                        new
                        {
                            Id = 19,
                            Name = "generate"
                        },
                        new
                        {
                            Id = 20,
                            Name = "override"
                        });
                });

            modelBuilder.Entity("ZuydSpeelt.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("GameId")
                        .HasColumnType("integer");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("UserId");

                    b.ToTable("Comment");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2023, 6, 7, 0, 9, 49, 37, DateTimeKind.Utc).AddTicks(8243),
                            GameId = 1,
                            Text = "Use the bluetooth PNG array, then you can back up the bluetooth array!",
                            UserId = 2
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2023, 6, 6, 15, 5, 37, 591, DateTimeKind.Utc).AddTicks(2973),
                            GameId = 2,
                            Text = "You can't back up the hard drive without indexing the haptic FTP hard drive!",
                            UserId = 5
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2023, 6, 6, 15, 1, 57, 501, DateTimeKind.Utc).AddTicks(9048),
                            GameId = 4,
                            Text = "Use the 1080p SCSI bus, then you can reboot the 1080p bus!",
                            UserId = 3
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2023, 6, 7, 12, 48, 24, 987, DateTimeKind.Utc).AddTicks(2928),
                            GameId = 2,
                            Text = "You can't navigate the program without programming the cross-platform EXE program!",
                            UserId = 4
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2023, 6, 7, 4, 9, 2, 922, DateTimeKind.Utc).AddTicks(3375),
                            GameId = 2,
                            Text = "You can't back up the pixel without programming the mobile COM pixel!",
                            UserId = 3
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2023, 6, 6, 18, 1, 45, 433, DateTimeKind.Utc).AddTicks(5054),
                            GameId = 4,
                            Text = "navigating the panel won't do anything, we need to transmit the digital AI panel!",
                            UserId = 5
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2023, 6, 6, 19, 44, 47, 831, DateTimeKind.Utc).AddTicks(1145),
                            GameId = 1,
                            Text = "The PCI capacitor is down, compress the 1080p capacitor so we can compress the PCI capacitor!",
                            UserId = 4
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2023, 6, 6, 14, 29, 0, 188, DateTimeKind.Utc).AddTicks(2020),
                            GameId = 4,
                            Text = "We need to program the haptic COM microchip!",
                            UserId = 2
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(2023, 6, 7, 10, 53, 33, 493, DateTimeKind.Utc).AddTicks(3848),
                            GameId = 4,
                            Text = "We need to index the neural HTTP monitor!",
                            UserId = 5
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(2023, 6, 7, 10, 41, 25, 926, DateTimeKind.Utc).AddTicks(7294),
                            GameId = 2,
                            Text = "overriding the transmitter won't do anything, we need to override the back-end SMTP transmitter!",
                            UserId = 4
                        },
                        new
                        {
                            Id = 11,
                            CreatedAt = new DateTime(2023, 6, 6, 18, 45, 26, 343, DateTimeKind.Utc).AddTicks(4206),
                            GameId = 3,
                            Text = "generating the firewall won't do anything, we need to copy the wireless JSON firewall!",
                            UserId = 4
                        },
                        new
                        {
                            Id = 12,
                            CreatedAt = new DateTime(2023, 6, 6, 13, 9, 50, 48, DateTimeKind.Utc).AddTicks(169),
                            GameId = 5,
                            Text = "Try to synthesize the FTP alarm, maybe it will synthesize the wireless alarm!",
                            UserId = 4
                        },
                        new
                        {
                            Id = 13,
                            CreatedAt = new DateTime(2023, 6, 6, 19, 18, 50, 870, DateTimeKind.Utc).AddTicks(2951),
                            GameId = 5,
                            Text = "You can't copy the feed without synthesizing the auxiliary JBOD feed!",
                            UserId = 3
                        },
                        new
                        {
                            Id = 14,
                            CreatedAt = new DateTime(2023, 6, 6, 20, 19, 40, 176, DateTimeKind.Utc).AddTicks(2988),
                            GameId = 2,
                            Text = "Use the haptic XML array, then you can synthesize the haptic array!",
                            UserId = 4
                        },
                        new
                        {
                            Id = 15,
                            CreatedAt = new DateTime(2023, 6, 7, 12, 34, 51, 66, DateTimeKind.Utc).AddTicks(157),
                            GameId = 5,
                            Text = "hacking the pixel won't do anything, we need to override the wireless FTP pixel!",
                            UserId = 2
                        },
                        new
                        {
                            Id = 16,
                            CreatedAt = new DateTime(2023, 6, 6, 15, 21, 32, 664, DateTimeKind.Utc).AddTicks(5757),
                            GameId = 2,
                            Text = "bypassing the system won't do anything, we need to reboot the virtual CSS system!",
                            UserId = 4
                        },
                        new
                        {
                            Id = 17,
                            CreatedAt = new DateTime(2023, 6, 7, 7, 51, 10, 363, DateTimeKind.Utc).AddTicks(3307),
                            GameId = 4,
                            Text = "Try to navigate the PCI array, maybe it will navigate the back-end array!",
                            UserId = 4
                        },
                        new
                        {
                            Id = 18,
                            CreatedAt = new DateTime(2023, 6, 7, 3, 47, 20, 876, DateTimeKind.Utc).AddTicks(1876),
                            GameId = 5,
                            Text = "Try to reboot the SCSI feed, maybe it will reboot the redundant feed!",
                            UserId = 5
                        },
                        new
                        {
                            Id = 19,
                            CreatedAt = new DateTime(2023, 6, 7, 5, 42, 32, 697, DateTimeKind.Utc).AddTicks(8154),
                            GameId = 3,
                            Text = "Try to program the JBOD firewall, maybe it will program the wireless firewall!",
                            UserId = 4
                        },
                        new
                        {
                            Id = 20,
                            CreatedAt = new DateTime(2023, 6, 7, 8, 19, 39, 354, DateTimeKind.Utc).AddTicks(2777),
                            GameId = 2,
                            Text = "Use the haptic GB application, then you can connect the haptic application!",
                            UserId = 1
                        });
                });

            modelBuilder.Entity("ZuydSpeelt.Game", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Popularity")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Game");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 4,
                            CreatedAt = new DateTime(2023, 6, 7, 0, 3, 45, 74, DateTimeKind.Utc).AddTicks(2347),
                            Popularity = 1,
                            Title = "Try to parse the SQL alarm, maybe it will parse the solid state alarm!"
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 2,
                            CreatedAt = new DateTime(2023, 6, 6, 16, 3, 59, 156, DateTimeKind.Utc).AddTicks(5570),
                            Popularity = 2,
                            Title = "Try to calculate the ADP application, maybe it will calculate the digital application!"
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 2,
                            CreatedAt = new DateTime(2023, 6, 7, 4, 19, 21, 548, DateTimeKind.Utc).AddTicks(2733),
                            Popularity = 2,
                            Title = "synthesizing the pixel won't do anything, we need to parse the auxiliary EXE pixel!"
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 3,
                            CreatedAt = new DateTime(2023, 6, 7, 7, 0, 15, 747, DateTimeKind.Utc).AddTicks(4924),
                            Popularity = 4,
                            Title = "If we program the matrix, we can get to the HTTP matrix through the auxiliary HTTP matrix!"
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 1,
                            CreatedAt = new DateTime(2023, 6, 7, 0, 54, 20, 466, DateTimeKind.Utc).AddTicks(4907),
                            Popularity = 3,
                            Title = "I'll synthesize the bluetooth PCI pixel, that should pixel the PCI pixel!"
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 1,
                            CreatedAt = new DateTime(2023, 6, 6, 14, 46, 43, 819, DateTimeKind.Utc).AddTicks(3881),
                            Popularity = 3,
                            Title = "If we navigate the capacitor, we can get to the SSL capacitor through the online SSL capacitor!"
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 2,
                            CreatedAt = new DateTime(2023, 6, 6, 19, 1, 9, 478, DateTimeKind.Utc).AddTicks(1800),
                            Popularity = 1,
                            Title = "You can't quantify the array without synthesizing the solid state XSS array!"
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 3,
                            CreatedAt = new DateTime(2023, 6, 6, 19, 49, 44, 717, DateTimeKind.Utc).AddTicks(7948),
                            Popularity = 3,
                            Title = "Use the redundant PCI firewall, then you can parse the redundant firewall!"
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 5,
                            CreatedAt = new DateTime(2023, 6, 6, 22, 55, 20, 376, DateTimeKind.Utc).AddTicks(737),
                            Popularity = 1,
                            Title = "We need to generate the bluetooth SDD capacitor!"
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 3,
                            CreatedAt = new DateTime(2023, 6, 7, 4, 56, 56, 152, DateTimeKind.Utc).AddTicks(4345),
                            Popularity = 1,
                            Title = "Use the multi-byte GB bus, then you can copy the multi-byte bus!"
                        },
                        new
                        {
                            Id = 11,
                            CategoryId = 5,
                            CreatedAt = new DateTime(2023, 6, 6, 19, 13, 29, 603, DateTimeKind.Utc).AddTicks(9845),
                            Popularity = 2,
                            Title = "synthesizing the firewall won't do anything, we need to quantify the digital JSON firewall!"
                        },
                        new
                        {
                            Id = 12,
                            CategoryId = 4,
                            CreatedAt = new DateTime(2023, 6, 7, 2, 29, 8, 621, DateTimeKind.Utc).AddTicks(364),
                            Popularity = 2,
                            Title = "You can't reboot the matrix without compressing the primary HTTP matrix!"
                        },
                        new
                        {
                            Id = 13,
                            CategoryId = 1,
                            CreatedAt = new DateTime(2023, 6, 7, 7, 4, 40, 260, DateTimeKind.Utc).AddTicks(5371),
                            Popularity = 3,
                            Title = "If we calculate the protocol, we can get to the JSON protocol through the virtual JSON protocol!"
                        },
                        new
                        {
                            Id = 14,
                            CategoryId = 5,
                            CreatedAt = new DateTime(2023, 6, 7, 3, 54, 15, 192, DateTimeKind.Utc).AddTicks(4463),
                            Popularity = 1,
                            Title = "We need to input the auxiliary SCSI program!"
                        },
                        new
                        {
                            Id = 15,
                            CategoryId = 2,
                            CreatedAt = new DateTime(2023, 6, 6, 20, 53, 12, 131, DateTimeKind.Utc).AddTicks(4919),
                            Popularity = 4,
                            Title = "I'll back up the neural RAM hard drive, that should hard drive the RAM hard drive!"
                        },
                        new
                        {
                            Id = 16,
                            CategoryId = 2,
                            CreatedAt = new DateTime(2023, 6, 6, 20, 56, 14, 149, DateTimeKind.Utc).AddTicks(4942),
                            Popularity = 2,
                            Title = "Use the mobile RSS interface, then you can compress the mobile interface!"
                        },
                        new
                        {
                            Id = 17,
                            CategoryId = 4,
                            CreatedAt = new DateTime(2023, 6, 7, 7, 0, 17, 374, DateTimeKind.Utc).AddTicks(5804),
                            Popularity = 4,
                            Title = "If we parse the hard drive, we can get to the USB hard drive through the open-source USB hard drive!"
                        },
                        new
                        {
                            Id = 18,
                            CategoryId = 2,
                            CreatedAt = new DateTime(2023, 6, 7, 0, 59, 49, 912, DateTimeKind.Utc).AddTicks(3515),
                            Popularity = 5,
                            Title = "Use the 1080p SAS bus, then you can index the 1080p bus!"
                        },
                        new
                        {
                            Id = 19,
                            CategoryId = 1,
                            CreatedAt = new DateTime(2023, 6, 6, 15, 6, 14, 16, DateTimeKind.Utc).AddTicks(1627),
                            Popularity = 4,
                            Title = "Try to override the SDD firewall, maybe it will override the back-end firewall!"
                        },
                        new
                        {
                            Id = 20,
                            CategoryId = 5,
                            CreatedAt = new DateTime(2023, 6, 7, 11, 21, 23, 454, DateTimeKind.Utc).AddTicks(7931),
                            Popularity = 4,
                            Title = "Try to synthesize the XML program, maybe it will synthesize the open-source program!"
                        });
                });

            modelBuilder.Entity("ZuydSpeelt.Rating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("GameId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("Value")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("UserId");

                    b.ToTable("Rating");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            GameId = 4,
                            UserId = 4,
                            Value = 2
                        },
                        new
                        {
                            Id = 2,
                            GameId = 5,
                            UserId = 4,
                            Value = 4
                        },
                        new
                        {
                            Id = 3,
                            GameId = 4,
                            UserId = 1,
                            Value = 5
                        },
                        new
                        {
                            Id = 4,
                            GameId = 4,
                            UserId = 1,
                            Value = 3
                        },
                        new
                        {
                            Id = 5,
                            GameId = 2,
                            UserId = 3,
                            Value = 4
                        },
                        new
                        {
                            Id = 6,
                            GameId = 5,
                            UserId = 3,
                            Value = 1
                        },
                        new
                        {
                            Id = 7,
                            GameId = 2,
                            UserId = 5,
                            Value = 4
                        },
                        new
                        {
                            Id = 8,
                            GameId = 3,
                            UserId = 3,
                            Value = 1
                        },
                        new
                        {
                            Id = 9,
                            GameId = 5,
                            UserId = 4,
                            Value = 1
                        },
                        new
                        {
                            Id = 10,
                            GameId = 2,
                            UserId = 5,
                            Value = 1
                        },
                        new
                        {
                            Id = 11,
                            GameId = 2,
                            UserId = 4,
                            Value = 3
                        },
                        new
                        {
                            Id = 12,
                            GameId = 3,
                            UserId = 1,
                            Value = 1
                        },
                        new
                        {
                            Id = 13,
                            GameId = 4,
                            UserId = 4,
                            Value = 1
                        },
                        new
                        {
                            Id = 14,
                            GameId = 4,
                            UserId = 4,
                            Value = 4
                        },
                        new
                        {
                            Id = 15,
                            GameId = 3,
                            UserId = 3,
                            Value = 1
                        },
                        new
                        {
                            Id = 16,
                            GameId = 5,
                            UserId = 2,
                            Value = 3
                        },
                        new
                        {
                            Id = 17,
                            GameId = 2,
                            UserId = 1,
                            Value = 3
                        },
                        new
                        {
                            Id = 18,
                            GameId = 4,
                            UserId = 3,
                            Value = 5
                        },
                        new
                        {
                            Id = 19,
                            GameId = 2,
                            UserId = 3,
                            Value = 5
                        },
                        new
                        {
                            Id = 20,
                            GameId = 1,
                            UserId = 5,
                            Value = 1
                        });
                });

            modelBuilder.Entity("ZuydSpeelt.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2023, 6, 7, 4, 34, 36, 624, DateTimeKind.Utc).AddTicks(1106),
                            Email = "Blanche.Kub@hotmail.com",
                            Password = "input",
                            Username = "Boyd"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2023, 6, 6, 15, 10, 21, 439, DateTimeKind.Utc).AddTicks(8422),
                            Email = "Zion_Balistreri@hotmail.com",
                            Password = "copy",
                            Username = "Javonte"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2023, 6, 6, 19, 2, 4, 575, DateTimeKind.Utc).AddTicks(4041),
                            Email = "Margret34@yahoo.com",
                            Password = "reboot",
                            Username = "Liam"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2023, 6, 7, 10, 50, 0, 853, DateTimeKind.Utc).AddTicks(3506),
                            Email = "Zion_Nolan@gmail.com",
                            Password = "hack",
                            Username = "Maximillian"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2023, 6, 7, 7, 2, 18, 301, DateTimeKind.Utc).AddTicks(633),
                            Email = "Jovanny32@yahoo.com",
                            Password = "transmit",
                            Username = "Pablo"
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2023, 6, 6, 19, 58, 26, 533, DateTimeKind.Utc).AddTicks(3325),
                            Email = "Lucas_Hodkiewicz@gmail.com",
                            Password = "bypass",
                            Username = "Javonte"
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2023, 6, 7, 0, 28, 31, 316, DateTimeKind.Utc).AddTicks(1656),
                            Email = "Rosetta.Kohler@yahoo.com",
                            Password = "synthesize",
                            Username = "Howard"
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2023, 6, 7, 11, 16, 49, 526, DateTimeKind.Utc).AddTicks(9726),
                            Email = "Penelope92@yahoo.com",
                            Password = "reboot",
                            Username = "Geovanny"
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(2023, 6, 6, 21, 1, 42, 495, DateTimeKind.Utc).AddTicks(8013),
                            Email = "Moses.Nolan@gmail.com",
                            Password = "parse",
                            Username = "Bettie"
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(2023, 6, 7, 4, 20, 25, 27, DateTimeKind.Utc).AddTicks(9801),
                            Email = "Edd46@hotmail.com",
                            Password = "index",
                            Username = "Alba"
                        },
                        new
                        {
                            Id = 11,
                            CreatedAt = new DateTime(2023, 6, 7, 4, 36, 25, 968, DateTimeKind.Utc).AddTicks(45),
                            Email = "Marilou16@yahoo.com",
                            Password = "index",
                            Username = "Jimmie"
                        },
                        new
                        {
                            Id = 12,
                            CreatedAt = new DateTime(2023, 6, 7, 12, 13, 4, 429, DateTimeKind.Utc).AddTicks(5775),
                            Email = "Pat_Jones@hotmail.com",
                            Password = "override",
                            Username = "Kaleigh"
                        },
                        new
                        {
                            Id = 13,
                            CreatedAt = new DateTime(2023, 6, 6, 20, 35, 46, 44, DateTimeKind.Utc).AddTicks(7069),
                            Email = "Connie15@hotmail.com",
                            Password = "calculate",
                            Username = "Edna"
                        },
                        new
                        {
                            Id = 14,
                            CreatedAt = new DateTime(2023, 6, 7, 9, 56, 24, 919, DateTimeKind.Utc).AddTicks(1767),
                            Email = "Herbert.MacGyver97@yahoo.com",
                            Password = "navigate",
                            Username = "Marge"
                        },
                        new
                        {
                            Id = 15,
                            CreatedAt = new DateTime(2023, 6, 7, 7, 11, 51, 125, DateTimeKind.Utc).AddTicks(7115),
                            Email = "Merritt1@yahoo.com",
                            Password = "synthesize",
                            Username = "Amya"
                        },
                        new
                        {
                            Id = 16,
                            CreatedAt = new DateTime(2023, 6, 6, 17, 3, 35, 786, DateTimeKind.Utc).AddTicks(8446),
                            Email = "Orrin_Spencer@gmail.com",
                            Password = "navigate",
                            Username = "Mara"
                        },
                        new
                        {
                            Id = 17,
                            CreatedAt = new DateTime(2023, 6, 7, 9, 15, 12, 536, DateTimeKind.Utc).AddTicks(2691),
                            Email = "Doris_Yost@yahoo.com",
                            Password = "override",
                            Username = "Earline"
                        },
                        new
                        {
                            Id = 18,
                            CreatedAt = new DateTime(2023, 6, 7, 3, 45, 57, 547, DateTimeKind.Utc).AddTicks(3776),
                            Email = "Marlene.Nicolas60@yahoo.com",
                            Password = "hack",
                            Username = "Tiana"
                        },
                        new
                        {
                            Id = 19,
                            CreatedAt = new DateTime(2023, 6, 6, 21, 15, 34, 6, DateTimeKind.Utc).AddTicks(1309),
                            Email = "Della.Fay@yahoo.com",
                            Password = "compress",
                            Username = "Erick"
                        },
                        new
                        {
                            Id = 20,
                            CreatedAt = new DateTime(2023, 6, 7, 8, 15, 9, 976, DateTimeKind.Utc).AddTicks(3778),
                            Email = "Constantin33@gmail.com",
                            Password = "synthesize",
                            Username = "Woodrow"
                        });
                });

            modelBuilder.Entity("ZuydSpeelt.UserGame", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("GameId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Score")
                        .HasColumnType("integer");

                    b.HasKey("UserId", "GameId", "CreatedAt");

                    b.HasIndex("GameId");

                    b.ToTable("UserGame");

                    b.HasData(
                        new
                        {
                            UserId = 5,
                            GameId = 4,
                            CreatedAt = new DateTime(2023, 6, 7, 11, 3, 31, 684, DateTimeKind.Utc).AddTicks(9147),
                            Score = 10
                        },
                        new
                        {
                            UserId = 4,
                            GameId = 5,
                            CreatedAt = new DateTime(2023, 6, 7, 1, 18, 52, 303, DateTimeKind.Utc).AddTicks(6063),
                            Score = 5
                        },
                        new
                        {
                            UserId = 3,
                            GameId = 2,
                            CreatedAt = new DateTime(2023, 6, 7, 12, 38, 7, 40, DateTimeKind.Utc).AddTicks(6230),
                            Score = 1
                        },
                        new
                        {
                            UserId = 5,
                            GameId = 4,
                            CreatedAt = new DateTime(2023, 6, 6, 23, 42, 56, 894, DateTimeKind.Utc).AddTicks(5304),
                            Score = 6
                        },
                        new
                        {
                            UserId = 1,
                            GameId = 5,
                            CreatedAt = new DateTime(2023, 6, 7, 4, 40, 11, 62, DateTimeKind.Utc).AddTicks(227),
                            Score = 8
                        },
                        new
                        {
                            UserId = 5,
                            GameId = 3,
                            CreatedAt = new DateTime(2023, 6, 7, 7, 47, 31, 31, DateTimeKind.Utc).AddTicks(1777),
                            Score = 9
                        },
                        new
                        {
                            UserId = 1,
                            GameId = 2,
                            CreatedAt = new DateTime(2023, 6, 7, 6, 46, 25, 382, DateTimeKind.Utc).AddTicks(502),
                            Score = 9
                        },
                        new
                        {
                            UserId = 4,
                            GameId = 2,
                            CreatedAt = new DateTime(2023, 6, 6, 21, 51, 29, 773, DateTimeKind.Utc).AddTicks(8429),
                            Score = 3
                        },
                        new
                        {
                            UserId = 2,
                            GameId = 5,
                            CreatedAt = new DateTime(2023, 6, 7, 2, 14, 5, 508, DateTimeKind.Utc).AddTicks(2005),
                            Score = 2
                        },
                        new
                        {
                            UserId = 2,
                            GameId = 4,
                            CreatedAt = new DateTime(2023, 6, 6, 19, 25, 46, 896, DateTimeKind.Utc).AddTicks(2721),
                            Score = 6
                        },
                        new
                        {
                            UserId = 5,
                            GameId = 4,
                            CreatedAt = new DateTime(2023, 6, 6, 18, 14, 31, 395, DateTimeKind.Utc).AddTicks(9625),
                            Score = 9
                        },
                        new
                        {
                            UserId = 3,
                            GameId = 1,
                            CreatedAt = new DateTime(2023, 6, 6, 22, 9, 3, 393, DateTimeKind.Utc).AddTicks(1241),
                            Score = 2
                        },
                        new
                        {
                            UserId = 3,
                            GameId = 5,
                            CreatedAt = new DateTime(2023, 6, 6, 14, 27, 5, 975, DateTimeKind.Utc).AddTicks(1856),
                            Score = 9
                        },
                        new
                        {
                            UserId = 3,
                            GameId = 1,
                            CreatedAt = new DateTime(2023, 6, 7, 10, 8, 16, 49, DateTimeKind.Utc).AddTicks(1377),
                            Score = 1
                        },
                        new
                        {
                            UserId = 2,
                            GameId = 5,
                            CreatedAt = new DateTime(2023, 6, 7, 3, 49, 49, 500, DateTimeKind.Utc).AddTicks(1704),
                            Score = 4
                        },
                        new
                        {
                            UserId = 1,
                            GameId = 2,
                            CreatedAt = new DateTime(2023, 6, 7, 12, 22, 13, 177, DateTimeKind.Utc).AddTicks(8554),
                            Score = 1
                        },
                        new
                        {
                            UserId = 4,
                            GameId = 4,
                            CreatedAt = new DateTime(2023, 6, 6, 20, 42, 34, 840, DateTimeKind.Utc).AddTicks(871),
                            Score = 8
                        },
                        new
                        {
                            UserId = 1,
                            GameId = 2,
                            CreatedAt = new DateTime(2023, 6, 7, 6, 49, 47, 470, DateTimeKind.Utc).AddTicks(3263),
                            Score = 9
                        },
                        new
                        {
                            UserId = 1,
                            GameId = 1,
                            CreatedAt = new DateTime(2023, 6, 6, 13, 39, 42, 274, DateTimeKind.Utc).AddTicks(8743),
                            Score = 5
                        },
                        new
                        {
                            UserId = 5,
                            GameId = 3,
                            CreatedAt = new DateTime(2023, 6, 6, 23, 17, 45, 662, DateTimeKind.Utc).AddTicks(9295),
                            Score = 5
                        });
                });

            modelBuilder.Entity("ZuydSpeelt.Comment", b =>
                {
                    b.HasOne("ZuydSpeelt.Game", "Game")
                        .WithMany("Comments")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ZuydSpeelt.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ZuydSpeelt.Game", b =>
                {
                    b.HasOne("ZuydSpeelt.Category", "Category")
                        .WithMany("Games")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("ZuydSpeelt.Rating", b =>
                {
                    b.HasOne("ZuydSpeelt.Game", "Game")
                        .WithMany("Ratings")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ZuydSpeelt.User", "User")
                        .WithMany("Ratings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ZuydSpeelt.UserGame", b =>
                {
                    b.HasOne("ZuydSpeelt.Game", "Game")
                        .WithMany("UserGames")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ZuydSpeelt.User", "User")
                        .WithMany("UserGames")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ZuydSpeelt.Category", b =>
                {
                    b.Navigation("Games");
                });

            modelBuilder.Entity("ZuydSpeelt.Game", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Ratings");

                    b.Navigation("UserGames");
                });

            modelBuilder.Entity("ZuydSpeelt.User", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Ratings");

                    b.Navigation("UserGames");
                });
#pragma warning restore 612, 618
        }
    }
}
