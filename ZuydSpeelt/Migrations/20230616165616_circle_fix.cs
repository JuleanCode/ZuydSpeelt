using System;
using Microsoft.EntityFrameworkCore.Migrations;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

#pragma warning disable CA1814 // Prefer jagged arrays over multidimensional

namespace ZuydSpeelt.Migrations
{
    /// <inheritdoc />
    public partial class circle_fix : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.CreateTable(
                name: "Category",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    Name = table.Column<string>(type: "text", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Category", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "User",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    Username = table.Column<string>(type: "text", nullable: false),
                    Password = table.Column<string>(type: "text", nullable: false),
                    Email = table.Column<string>(type: "text", nullable: false),
                    CreatedAt = table.Column<DateTime>(type: "timestamp with time zone", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_User", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "Game",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    Title = table.Column<string>(type: "text", nullable: false),
                    CreatedAt = table.Column<DateTime>(type: "timestamp with time zone", nullable: false),
                    Popularity = table.Column<int>(type: "integer", nullable: false),
                    CategoryId = table.Column<int>(type: "integer", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Game", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Game_Category_CategoryId",
                        column: x => x.CategoryId,
                        principalTable: "Category",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "Comment",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    UserId = table.Column<int>(type: "integer", nullable: false),
                    GameId = table.Column<int>(type: "integer", nullable: false),
                    Text = table.Column<string>(type: "text", nullable: false),
                    CreatedAt = table.Column<DateTime>(type: "timestamp with time zone", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Comment", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Comment_Game_GameId",
                        column: x => x.GameId,
                        principalTable: "Game",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_Comment_User_UserId",
                        column: x => x.UserId,
                        principalTable: "User",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "Rating",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    UserId = table.Column<int>(type: "integer", nullable: false),
                    GameId = table.Column<int>(type: "integer", nullable: false),
                    Value = table.Column<int>(type: "integer", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Rating", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Rating_Game_GameId",
                        column: x => x.GameId,
                        principalTable: "Game",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_Rating_User_UserId",
                        column: x => x.UserId,
                        principalTable: "User",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "UserGame",
                columns: table => new
                {
                    UserId = table.Column<int>(type: "integer", nullable: false),
                    GameId = table.Column<int>(type: "integer", nullable: false),
                    CreatedAt = table.Column<DateTime>(type: "timestamp with time zone", nullable: false),
                    Score = table.Column<int>(type: "integer", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_UserGame", x => new { x.UserId, x.GameId, x.CreatedAt });
                    table.ForeignKey(
                        name: "FK_UserGame_Game_GameId",
                        column: x => x.GameId,
                        principalTable: "Game",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_UserGame_User_UserId",
                        column: x => x.UserId,
                        principalTable: "User",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.InsertData(
                table: "Category",
                columns: new[] { "Id", "Name" },
                values: new object[,]
                {
                    { 1, "back up" },
                    { 2, "index" },
                    { 3, "copy" },
                    { 4, "calculate" },
                    { 5, "quantify" },
                    { 6, "back up" },
                    { 7, "compress" },
                    { 8, "back up" },
                    { 9, "copy" },
                    { 10, "reboot" },
                    { 11, "program" },
                    { 12, "reboot" },
                    { 13, "back up" },
                    { 14, "copy" },
                    { 15, "transmit" },
                    { 16, "compress" },
                    { 17, "calculate" },
                    { 18, "program" },
                    { 19, "quantify" },
                    { 20, "hack" },
                    { 21, "copy" },
                    { 22, "connect" },
                    { 23, "parse" },
                    { 24, "parse" },
                    { 25, "bypass" },
                    { 26, "generate" },
                    { 27, "transmit" },
                    { 28, "bypass" },
                    { 29, "back up" },
                    { 30, "back up" },
                    { 31, "bypass" },
                    { 32, "quantify" },
                    { 33, "calculate" },
                    { 34, "input" },
                    { 35, "index" },
                    { 36, "copy" },
                    { 37, "input" },
                    { 38, "bypass" },
                    { 39, "compress" },
                    { 40, "connect" },
                    { 41, "parse" },
                    { 42, "synthesize" },
                    { 43, "back up" },
                    { 44, "synthesize" },
                    { 45, "hack" },
                    { 46, "quantify" },
                    { 47, "override" },
                    { 48, "synthesize" },
                    { 49, "override" },
                    { 50, "back up" },
                    { 51, "generate" },
                    { 52, "override" },
                    { 53, "parse" },
                    { 54, "synthesize" },
                    { 55, "compress" },
                    { 56, "override" },
                    { 57, "input" },
                    { 58, "input" },
                    { 59, "hack" },
                    { 60, "calculate" },
                    { 61, "back up" },
                    { 62, "back up" },
                    { 63, "program" },
                    { 64, "transmit" },
                    { 65, "copy" },
                    { 66, "transmit" },
                    { 67, "hack" },
                    { 68, "connect" },
                    { 69, "input" },
                    { 70, "transmit" },
                    { 71, "index" },
                    { 72, "synthesize" },
                    { 73, "copy" },
                    { 74, "copy" },
                    { 75, "compress" },
                    { 76, "connect" },
                    { 77, "quantify" },
                    { 78, "reboot" },
                    { 79, "quantify" },
                    { 80, "hack" },
                    { 81, "generate" },
                    { 82, "quantify" },
                    { 83, "index" },
                    { 84, "connect" },
                    { 85, "bypass" },
                    { 86, "index" },
                    { 87, "input" },
                    { 88, "synthesize" },
                    { 89, "parse" },
                    { 90, "index" },
                    { 91, "generate" },
                    { 92, "compress" },
                    { 93, "reboot" },
                    { 94, "index" },
                    { 95, "quantify" },
                    { 96, "transmit" },
                    { 97, "index" },
                    { 98, "copy" },
                    { 99, "input" },
                    { 100, "transmit" }
                });

            migrationBuilder.InsertData(
                table: "User",
                columns: new[] { "Id", "CreatedAt", "Email", "Password", "Username" },
                values: new object[,]
                {
                    { 1, new DateTime(2023, 6, 16, 1, 37, 3, 279, DateTimeKind.Utc).AddTicks(8557), "Lorenzo_Bauch@gmail.com", "generate", "Bethel" },
                    { 2, new DateTime(2023, 6, 15, 21, 48, 5, 774, DateTimeKind.Utc).AddTicks(4796), "Shaun_Greenholt3@hotmail.com", "bypass", "Conner" },
                    { 3, new DateTime(2023, 6, 16, 3, 30, 47, 719, DateTimeKind.Utc).AddTicks(4348), "Neoma.Friesen91@hotmail.com", "navigate", "Alek" },
                    { 4, new DateTime(2023, 6, 15, 21, 23, 48, 733, DateTimeKind.Utc).AddTicks(3074), "Libbie_Mohr@hotmail.com", "program", "Fabian" },
                    { 5, new DateTime(2023, 6, 16, 4, 28, 19, 471, DateTimeKind.Utc).AddTicks(7517), "Jaydon42@gmail.com", "quantify", "Beau" },
                    { 6, new DateTime(2023, 6, 16, 2, 57, 52, 157, DateTimeKind.Utc).AddTicks(7205), "Hank.Harris50@hotmail.com", "compress", "Destany" },
                    { 7, new DateTime(2023, 6, 15, 16, 58, 36, 511, DateTimeKind.Utc).AddTicks(2198), "Beau_VonRueden@hotmail.com", "connect", "Angelina" },
                    { 8, new DateTime(2023, 6, 16, 4, 38, 0, 403, DateTimeKind.Utc).AddTicks(9435), "Casey.Fritsch@gmail.com", "navigate", "Aron" },
                    { 9, new DateTime(2023, 6, 16, 10, 23, 14, 88, DateTimeKind.Utc).AddTicks(1598), "Cathryn50@yahoo.com", "calculate", "Mac" },
                    { 10, new DateTime(2023, 6, 16, 12, 28, 44, 880, DateTimeKind.Utc).AddTicks(3610), "Savanah.Swaniawski@yahoo.com", "index", "Deanna" },
                    { 11, new DateTime(2023, 6, 15, 23, 12, 46, 221, DateTimeKind.Utc).AddTicks(6226), "Althea_Erdman37@yahoo.com", "hack", "Aric" },
                    { 12, new DateTime(2023, 6, 16, 15, 28, 35, 480, DateTimeKind.Utc).AddTicks(413), "Jammie71@hotmail.com", "transmit", "Lilian" },
                    { 13, new DateTime(2023, 6, 16, 13, 21, 12, 601, DateTimeKind.Utc).AddTicks(19), "Donnie.Rempel@hotmail.com", "parse", "Ernie" },
                    { 14, new DateTime(2023, 6, 16, 0, 10, 39, 576, DateTimeKind.Utc).AddTicks(2722), "Sabryna_Hilll@hotmail.com", "program", "Demarco" },
                    { 15, new DateTime(2023, 6, 16, 10, 59, 2, 651, DateTimeKind.Utc).AddTicks(8484), "Sabina.OKeefe@hotmail.com", "program", "Valentine" },
                    { 16, new DateTime(2023, 6, 16, 5, 20, 10, 995, DateTimeKind.Utc).AddTicks(9148), "Phyllis_Stroman@gmail.com", "navigate", "Zechariah" },
                    { 17, new DateTime(2023, 6, 16, 12, 29, 21, 849, DateTimeKind.Utc).AddTicks(6490), "Santos0@yahoo.com", "input", "Agustin" },
                    { 18, new DateTime(2023, 6, 15, 23, 25, 46, 457, DateTimeKind.Utc).AddTicks(2917), "Evalyn32@yahoo.com", "compress", "Gardner" },
                    { 19, new DateTime(2023, 6, 16, 16, 44, 5, 589, DateTimeKind.Utc).AddTicks(5856), "Darion_Barton@hotmail.com", "calculate", "Eloise" },
                    { 20, new DateTime(2023, 6, 16, 5, 21, 18, 237, DateTimeKind.Utc).AddTicks(3950), "Adaline.Murphy@hotmail.com", "copy", "Kole" },
                    { 21, new DateTime(2023, 6, 16, 2, 22, 15, 545, DateTimeKind.Utc).AddTicks(5260), "Pauline68@gmail.com", "synthesize", "Jaida" },
                    { 22, new DateTime(2023, 6, 15, 18, 27, 23, 224, DateTimeKind.Utc).AddTicks(2404), "Ewell30@hotmail.com", "bypass", "Berry" },
                    { 23, new DateTime(2023, 6, 16, 6, 14, 25, 973, DateTimeKind.Utc).AddTicks(7841), "Estefania46@gmail.com", "back up", "Jimmie" },
                    { 24, new DateTime(2023, 6, 16, 5, 52, 26, 35, DateTimeKind.Utc).AddTicks(9137), "Kallie_Kris79@gmail.com", "compress", "Ava" },
                    { 25, new DateTime(2023, 6, 16, 7, 42, 53, 116, DateTimeKind.Utc).AddTicks(6192), "Wilson_Predovic74@hotmail.com", "connect", "Wilhelmine" },
                    { 26, new DateTime(2023, 6, 16, 12, 33, 9, 812, DateTimeKind.Utc).AddTicks(9831), "Leann.Effertz12@gmail.com", "navigate", "Kirk" },
                    { 27, new DateTime(2023, 6, 15, 21, 40, 17, 746, DateTimeKind.Utc).AddTicks(600), "Joyce.Witting@yahoo.com", "reboot", "Maximus" },
                    { 28, new DateTime(2023, 6, 16, 5, 55, 14, 384, DateTimeKind.Utc).AddTicks(2844), "Harold63@gmail.com", "program", "Lavonne" },
                    { 29, new DateTime(2023, 6, 16, 10, 29, 14, 610, DateTimeKind.Utc).AddTicks(9797), "Prudence.Bayer8@gmail.com", "override", "Jessy" },
                    { 30, new DateTime(2023, 6, 16, 7, 41, 12, 467, DateTimeKind.Utc).AddTicks(3421), "Anastacio6@yahoo.com", "copy", "Mac" },
                    { 31, new DateTime(2023, 6, 15, 23, 23, 59, 876, DateTimeKind.Utc).AddTicks(7735), "Santa_Schuster@hotmail.com", "transmit", "Vernie" },
                    { 32, new DateTime(2023, 6, 15, 17, 35, 4, 676, DateTimeKind.Utc).AddTicks(3911), "Lyda.Cassin@yahoo.com", "calculate", "Zelma" },
                    { 33, new DateTime(2023, 6, 16, 5, 2, 17, 14, DateTimeKind.Utc).AddTicks(5810), "Art_Upton35@gmail.com", "calculate", "Martine" },
                    { 34, new DateTime(2023, 6, 16, 13, 56, 6, 536, DateTimeKind.Utc).AddTicks(2013), "Maritza_Ullrich@yahoo.com", "back up", "Misael" },
                    { 35, new DateTime(2023, 6, 16, 14, 26, 1, 966, DateTimeKind.Utc).AddTicks(6030), "Sierra56@yahoo.com", "compress", "Jessy" },
                    { 36, new DateTime(2023, 6, 16, 5, 26, 23, 157, DateTimeKind.Utc).AddTicks(8399), "Ian_Gibson@yahoo.com", "generate", "Broderick" },
                    { 37, new DateTime(2023, 6, 15, 19, 22, 10, 271, DateTimeKind.Utc).AddTicks(4206), "Myrl20@hotmail.com", "program", "Jamar" },
                    { 38, new DateTime(2023, 6, 16, 15, 27, 48, 712, DateTimeKind.Utc).AddTicks(8684), "Elbert_Mohr94@yahoo.com", "input", "Rocio" },
                    { 39, new DateTime(2023, 6, 16, 10, 53, 56, 370, DateTimeKind.Utc).AddTicks(5267), "Violette_Swift20@yahoo.com", "input", "Lorenza" },
                    { 40, new DateTime(2023, 6, 16, 12, 15, 8, 535, DateTimeKind.Utc).AddTicks(4116), "Amira.Labadie14@gmail.com", "hack", "Graham" },
                    { 41, new DateTime(2023, 6, 16, 2, 12, 32, 348, DateTimeKind.Utc).AddTicks(4891), "Natalia_Medhurst@gmail.com", "navigate", "Tiara" },
                    { 42, new DateTime(2023, 6, 16, 14, 29, 0, 728, DateTimeKind.Utc).AddTicks(3758), "Kellie20@gmail.com", "reboot", "Zoie" },
                    { 43, new DateTime(2023, 6, 16, 15, 50, 38, 860, DateTimeKind.Utc).AddTicks(3032), "Kameron37@gmail.com", "index", "Kory" },
                    { 44, new DateTime(2023, 6, 15, 22, 40, 40, 236, DateTimeKind.Utc).AddTicks(858), "Elizabeth75@hotmail.com", "program", "Luna" },
                    { 45, new DateTime(2023, 6, 16, 7, 20, 33, 310, DateTimeKind.Utc).AddTicks(3154), "Milford23@gmail.com", "back up", "Stephania" },
                    { 46, new DateTime(2023, 6, 16, 15, 15, 59, 705, DateTimeKind.Utc).AddTicks(8541), "Ayana.Kassulke@gmail.com", "bypass", "Corrine" },
                    { 47, new DateTime(2023, 6, 15, 20, 12, 56, 16, DateTimeKind.Utc).AddTicks(9926), "Fleta_Mitchell0@yahoo.com", "parse", "Lenna" },
                    { 48, new DateTime(2023, 6, 16, 14, 54, 46, 985, DateTimeKind.Utc).AddTicks(2751), "Juliet64@gmail.com", "input", "Dillon" },
                    { 49, new DateTime(2023, 6, 15, 18, 27, 26, 40, DateTimeKind.Utc).AddTicks(9912), "Sarina_Kulas30@hotmail.com", "reboot", "Liana" },
                    { 50, new DateTime(2023, 6, 16, 1, 17, 50, 734, DateTimeKind.Utc).AddTicks(9504), "Ruby_Roob@yahoo.com", "connect", "Dannie" },
                    { 51, new DateTime(2023, 6, 16, 1, 31, 21, 75, DateTimeKind.Utc).AddTicks(4793), "Dane.Bashirian44@gmail.com", "back up", "Maegan" },
                    { 52, new DateTime(2023, 6, 16, 0, 21, 30, 264, DateTimeKind.Utc).AddTicks(1100), "Laverne85@gmail.com", "hack", "Meagan" },
                    { 53, new DateTime(2023, 6, 15, 20, 53, 13, 867, DateTimeKind.Utc).AddTicks(7097), "Daphne.Senger85@hotmail.com", "generate", "Patience" },
                    { 54, new DateTime(2023, 6, 16, 2, 10, 40, 284, DateTimeKind.Utc).AddTicks(3726), "Maximo_Fisher@gmail.com", "program", "Jena" },
                    { 55, new DateTime(2023, 6, 16, 7, 34, 45, 323, DateTimeKind.Utc).AddTicks(3817), "Lewis.Mayert50@hotmail.com", "copy", "Bell" },
                    { 56, new DateTime(2023, 6, 16, 9, 7, 27, 400, DateTimeKind.Utc).AddTicks(7674), "Vinnie_Harvey89@yahoo.com", "synthesize", "Ona" },
                    { 57, new DateTime(2023, 6, 15, 23, 50, 54, 657, DateTimeKind.Utc).AddTicks(1158), "Missouri_Bradtke@gmail.com", "calculate", "Jayde" },
                    { 58, new DateTime(2023, 6, 16, 1, 41, 22, 73, DateTimeKind.Utc).AddTicks(4356), "Norwood_Schuster@gmail.com", "hack", "Kristin" },
                    { 59, new DateTime(2023, 6, 15, 19, 17, 4, 421, DateTimeKind.Utc).AddTicks(4728), "Mateo2@yahoo.com", "index", "Ozella" },
                    { 60, new DateTime(2023, 6, 16, 13, 27, 28, 218, DateTimeKind.Utc).AddTicks(5279), "Ruthe_Pollich@gmail.com", "navigate", "Woodrow" },
                    { 61, new DateTime(2023, 6, 15, 19, 48, 58, 927, DateTimeKind.Utc).AddTicks(9453), "Milford.Nienow@gmail.com", "compress", "Malika" },
                    { 62, new DateTime(2023, 6, 16, 9, 59, 41, 325, DateTimeKind.Utc).AddTicks(7030), "Chris15@hotmail.com", "compress", "Houston" },
                    { 63, new DateTime(2023, 6, 16, 13, 48, 54, 909, DateTimeKind.Utc).AddTicks(3192), "Leon.Walker@hotmail.com", "hack", "Bernadette" },
                    { 64, new DateTime(2023, 6, 15, 18, 21, 43, 402, DateTimeKind.Utc).AddTicks(1622), "Cloyd74@hotmail.com", "connect", "Kaleigh" },
                    { 65, new DateTime(2023, 6, 16, 11, 33, 52, 178, DateTimeKind.Utc).AddTicks(2177), "Keeley.Hackett@yahoo.com", "copy", "Earnestine" },
                    { 66, new DateTime(2023, 6, 16, 4, 22, 10, 142, DateTimeKind.Utc).AddTicks(8316), "Amir38@hotmail.com", "generate", "Reece" },
                    { 67, new DateTime(2023, 6, 16, 5, 36, 25, 534, DateTimeKind.Utc).AddTicks(3146), "Tamia61@gmail.com", "program", "Jude" },
                    { 68, new DateTime(2023, 6, 15, 18, 45, 37, 689, DateTimeKind.Utc).AddTicks(2845), "Clyde78@yahoo.com", "compress", "Emmy" },
                    { 69, new DateTime(2023, 6, 16, 5, 30, 58, 597, DateTimeKind.Utc).AddTicks(9335), "Joanny_Abshire@gmail.com", "quantify", "Dallin" },
                    { 70, new DateTime(2023, 6, 15, 17, 5, 3, 643, DateTimeKind.Utc).AddTicks(6469), "Pattie.Funk24@yahoo.com", "input", "Alfreda" },
                    { 71, new DateTime(2023, 6, 16, 12, 59, 37, 429, DateTimeKind.Utc).AddTicks(5391), "Clifford97@gmail.com", "compress", "Nasir" },
                    { 72, new DateTime(2023, 6, 16, 15, 25, 27, 423, DateTimeKind.Utc).AddTicks(9684), "Felton.Lockman@yahoo.com", "connect", "Pansy" },
                    { 73, new DateTime(2023, 6, 15, 20, 19, 26, 318, DateTimeKind.Utc).AddTicks(5013), "Ronaldo.Tremblay25@yahoo.com", "copy", "Augustus" },
                    { 74, new DateTime(2023, 6, 16, 15, 36, 2, 606, DateTimeKind.Utc).AddTicks(250), "Jude_Grady@gmail.com", "input", "Deven" },
                    { 75, new DateTime(2023, 6, 16, 12, 51, 58, 238, DateTimeKind.Utc).AddTicks(7413), "Rubie.Hintz54@hotmail.com", "override", "Coy" },
                    { 76, new DateTime(2023, 6, 15, 17, 52, 41, 605, DateTimeKind.Utc).AddTicks(1462), "Valentine_Casper83@hotmail.com", "generate", "Ursula" },
                    { 77, new DateTime(2023, 6, 15, 20, 53, 52, 41, DateTimeKind.Utc).AddTicks(7209), "Mallie24@yahoo.com", "parse", "Justus" },
                    { 78, new DateTime(2023, 6, 16, 0, 19, 51, 388, DateTimeKind.Utc).AddTicks(6098), "Afton.Rippin@gmail.com", "reboot", "Adalberto" },
                    { 79, new DateTime(2023, 6, 15, 20, 55, 35, 946, DateTimeKind.Utc).AddTicks(4992), "Judson41@hotmail.com", "back up", "Lilian" },
                    { 80, new DateTime(2023, 6, 16, 14, 40, 15, 979, DateTimeKind.Utc).AddTicks(6508), "Jamison.Douglas@hotmail.com", "reboot", "Bridgette" },
                    { 81, new DateTime(2023, 6, 16, 3, 34, 18, 520, DateTimeKind.Utc).AddTicks(9353), "Marlon_Reynolds74@gmail.com", "copy", "Madonna" },
                    { 82, new DateTime(2023, 6, 15, 23, 18, 19, 218, DateTimeKind.Utc).AddTicks(8853), "Dawson37@hotmail.com", "connect", "Hipolito" },
                    { 83, new DateTime(2023, 6, 16, 9, 28, 29, 145, DateTimeKind.Utc).AddTicks(6456), "Conor.Howe23@gmail.com", "quantify", "Angela" },
                    { 84, new DateTime(2023, 6, 16, 11, 51, 35, 243, DateTimeKind.Utc).AddTicks(3159), "Reginald_Heaney@yahoo.com", "hack", "Samanta" },
                    { 85, new DateTime(2023, 6, 16, 12, 57, 30, 578, DateTimeKind.Utc).AddTicks(7015), "Sven_Dicki@yahoo.com", "override", "Aurore" },
                    { 86, new DateTime(2023, 6, 15, 17, 50, 35, 48, DateTimeKind.Utc).AddTicks(4521), "Lessie8@hotmail.com", "generate", "Gordon" },
                    { 87, new DateTime(2023, 6, 16, 2, 37, 11, 848, DateTimeKind.Utc).AddTicks(2038), "Rosella61@yahoo.com", "calculate", "Marina" },
                    { 88, new DateTime(2023, 6, 16, 15, 42, 14, 121, DateTimeKind.Utc).AddTicks(680), "Violette_Bradtke79@hotmail.com", "override", "Murphy" },
                    { 89, new DateTime(2023, 6, 16, 3, 59, 24, 662, DateTimeKind.Utc).AddTicks(2063), "Lawson.Auer@gmail.com", "transmit", "Rosalind" },
                    { 90, new DateTime(2023, 6, 16, 10, 34, 18, 772, DateTimeKind.Utc).AddTicks(9784), "Herminio.Heaney@yahoo.com", "index", "Brisa" },
                    { 91, new DateTime(2023, 6, 16, 9, 45, 20, 377, DateTimeKind.Utc).AddTicks(8975), "Emelie.Macejkovic@yahoo.com", "override", "Rosalyn" },
                    { 92, new DateTime(2023, 6, 16, 10, 20, 19, 511, DateTimeKind.Utc).AddTicks(9078), "Leslie57@hotmail.com", "calculate", "Halie" },
                    { 93, new DateTime(2023, 6, 15, 23, 41, 50, 622, DateTimeKind.Utc).AddTicks(6404), "Mandy.Bernhard@gmail.com", "bypass", "Demond" },
                    { 94, new DateTime(2023, 6, 16, 0, 11, 22, 849, DateTimeKind.Utc).AddTicks(6995), "Garnett.Wiza78@gmail.com", "generate", "Timmothy" },
                    { 95, new DateTime(2023, 6, 16, 4, 41, 59, 785, DateTimeKind.Utc).AddTicks(3897), "Yolanda36@gmail.com", "index", "Alexzander" },
                    { 96, new DateTime(2023, 6, 16, 14, 54, 7, 257, DateTimeKind.Utc).AddTicks(361), "Rachel87@yahoo.com", "bypass", "Judge" },
                    { 97, new DateTime(2023, 6, 16, 4, 43, 25, 536, DateTimeKind.Utc).AddTicks(9084), "Irving_Gerhold@gmail.com", "compress", "Hardy" },
                    { 98, new DateTime(2023, 6, 16, 15, 27, 6, 433, DateTimeKind.Utc).AddTicks(8607), "Kendrick_Bayer60@yahoo.com", "program", "Darby" },
                    { 99, new DateTime(2023, 6, 15, 22, 37, 7, 86, DateTimeKind.Utc).AddTicks(5081), "Natalie.Moore@yahoo.com", "bypass", "Domingo" },
                    { 100, new DateTime(2023, 6, 15, 21, 16, 56, 350, DateTimeKind.Utc).AddTicks(4290), "Alfreda_Gaylord@gmail.com", "hack", "Neoma" }
                });

            migrationBuilder.InsertData(
                table: "Game",
                columns: new[] { "Id", "CategoryId", "CreatedAt", "Popularity", "Title" },
                values: new object[,]
                {
                    { 1, 59, new DateTime(2023, 6, 16, 10, 55, 22, 673, DateTimeKind.Utc).AddTicks(8098), 16, "Try to hack the IB interface, maybe it will hack the 1080p interface!" },
                    { 2, 93, new DateTime(2023, 6, 15, 18, 59, 35, 914, DateTimeKind.Utc).AddTicks(548), 80, "Try to reboot the SAS system, maybe it will reboot the solid state system!" },
                    { 3, 66, new DateTime(2023, 6, 16, 16, 45, 56, 871, DateTimeKind.Utc).AddTicks(9054), 72, "We need to input the bluetooth JSON monitor!" },
                    { 4, 32, new DateTime(2023, 6, 16, 15, 7, 45, 604, DateTimeKind.Utc).AddTicks(1751), 99, "overriding the driver won't do anything, we need to connect the back-end FTP driver!" },
                    { 5, 73, new DateTime(2023, 6, 15, 20, 19, 17, 235, DateTimeKind.Utc).AddTicks(9932), 65, "generating the interface won't do anything, we need to connect the solid state ADP interface!" },
                    { 6, 71, new DateTime(2023, 6, 16, 3, 0, 17, 681, DateTimeKind.Utc).AddTicks(9993), 97, "I'll input the back-end HTTP pixel, that should pixel the HTTP pixel!" },
                    { 7, 87, new DateTime(2023, 6, 15, 23, 41, 32, 748, DateTimeKind.Utc).AddTicks(2136), 16, "Try to generate the USB pixel, maybe it will generate the neural pixel!" },
                    { 8, 13, new DateTime(2023, 6, 16, 12, 21, 29, 648, DateTimeKind.Utc).AddTicks(5793), 51, "I'll program the optical RAM feed, that should feed the RAM feed!" },
                    { 9, 45, new DateTime(2023, 6, 16, 9, 10, 33, 800, DateTimeKind.Utc).AddTicks(5802), 90, "Try to connect the JSON matrix, maybe it will connect the auxiliary matrix!" },
                    { 10, 25, new DateTime(2023, 6, 16, 3, 4, 15, 838, DateTimeKind.Utc).AddTicks(78), 6, "backing up the array won't do anything, we need to parse the virtual SMS array!" },
                    { 11, 19, new DateTime(2023, 6, 16, 11, 13, 6, 122, DateTimeKind.Utc).AddTicks(4657), 19, "We need to reboot the optical THX alarm!" },
                    { 12, 87, new DateTime(2023, 6, 16, 14, 56, 42, 126, DateTimeKind.Utc).AddTicks(2130), 31, "copying the program won't do anything, we need to bypass the bluetooth XML program!" },
                    { 13, 20, new DateTime(2023, 6, 16, 12, 33, 27, 507, DateTimeKind.Utc).AddTicks(5773), 17, "Use the neural ADP bus, then you can program the neural bus!" },
                    { 14, 31, new DateTime(2023, 6, 16, 7, 28, 13, 435, DateTimeKind.Utc).AddTicks(3281), 97, "You can't input the alarm without parsing the digital SMTP alarm!" },
                    { 15, 26, new DateTime(2023, 6, 15, 18, 48, 11, 234, DateTimeKind.Utc).AddTicks(4141), 7, "Try to override the AI pixel, maybe it will override the multi-byte pixel!" },
                    { 16, 26, new DateTime(2023, 6, 15, 19, 2, 17, 708, DateTimeKind.Utc).AddTicks(9481), 4, "indexing the feed won't do anything, we need to index the virtual RSS feed!" },
                    { 17, 15, new DateTime(2023, 6, 16, 6, 1, 36, 705, DateTimeKind.Utc).AddTicks(3655), 6, "The SMS capacitor is down, copy the cross-platform capacitor so we can copy the SMS capacitor!" },
                    { 18, 60, new DateTime(2023, 6, 15, 18, 34, 17, 20, DateTimeKind.Utc).AddTicks(9981), 49, "We need to compress the primary SMS capacitor!" },
                    { 19, 60, new DateTime(2023, 6, 15, 22, 9, 57, 578, DateTimeKind.Utc).AddTicks(1627), 80, "parsing the port won't do anything, we need to compress the multi-byte HDD port!" },
                    { 20, 28, new DateTime(2023, 6, 16, 2, 35, 33, 777, DateTimeKind.Utc).AddTicks(5052), 42, "quantifying the sensor won't do anything, we need to quantify the solid state HTTP sensor!" },
                    { 21, 10, new DateTime(2023, 6, 16, 12, 41, 42, 546, DateTimeKind.Utc).AddTicks(3290), 57, "Use the solid state SSL card, then you can program the solid state card!" },
                    { 22, 14, new DateTime(2023, 6, 16, 4, 20, 57, 195, DateTimeKind.Utc).AddTicks(86), 15, "I'll bypass the online EXE program, that should program the EXE program!" },
                    { 23, 60, new DateTime(2023, 6, 16, 2, 9, 6, 177, DateTimeKind.Utc).AddTicks(4983), 24, "We need to calculate the solid state CSS sensor!" },
                    { 24, 84, new DateTime(2023, 6, 16, 11, 9, 20, 452, DateTimeKind.Utc).AddTicks(8876), 96, "transmitting the application won't do anything, we need to program the open-source SSL application!" },
                    { 25, 96, new DateTime(2023, 6, 16, 11, 57, 55, 825, DateTimeKind.Utc).AddTicks(5351), 8, "The XML alarm is down, quantify the digital alarm so we can quantify the XML alarm!" },
                    { 26, 91, new DateTime(2023, 6, 16, 8, 3, 56, 296, DateTimeKind.Utc).AddTicks(648), 65, "I'll navigate the redundant SSL pixel, that should pixel the SSL pixel!" },
                    { 27, 83, new DateTime(2023, 6, 16, 2, 14, 14, 976, DateTimeKind.Utc).AddTicks(5530), 94, "copying the alarm won't do anything, we need to override the open-source SAS alarm!" },
                    { 28, 77, new DateTime(2023, 6, 16, 11, 48, 50, 474, DateTimeKind.Utc).AddTicks(4556), 7, "Try to parse the SDD feed, maybe it will parse the auxiliary feed!" },
                    { 29, 12, new DateTime(2023, 6, 16, 11, 32, 31, 318, DateTimeKind.Utc).AddTicks(2429), 34, "We need to reboot the bluetooth JBOD feed!" },
                    { 30, 85, new DateTime(2023, 6, 16, 13, 32, 23, 338, DateTimeKind.Utc).AddTicks(6233), 20, "hacking the hard drive won't do anything, we need to generate the multi-byte XML hard drive!" },
                    { 31, 95, new DateTime(2023, 6, 16, 2, 25, 24, 897, DateTimeKind.Utc).AddTicks(6235), 24, "parsing the interface won't do anything, we need to calculate the primary SAS interface!" },
                    { 32, 36, new DateTime(2023, 6, 16, 10, 20, 33, 524, DateTimeKind.Utc).AddTicks(4310), 11, "We need to hack the wireless SDD feed!" },
                    { 33, 80, new DateTime(2023, 6, 16, 9, 43, 28, 878, DateTimeKind.Utc).AddTicks(5264), 7, "Use the haptic XSS interface, then you can calculate the haptic interface!" },
                    { 34, 39, new DateTime(2023, 6, 16, 8, 40, 14, 615, DateTimeKind.Utc).AddTicks(8828), 52, "I'll synthesize the auxiliary SMS microchip, that should microchip the SMS microchip!" },
                    { 35, 95, new DateTime(2023, 6, 16, 5, 32, 23, 90, DateTimeKind.Utc).AddTicks(3387), 73, "The PNG protocol is down, program the primary protocol so we can program the PNG protocol!" },
                    { 36, 78, new DateTime(2023, 6, 16, 8, 35, 21, 971, DateTimeKind.Utc).AddTicks(593), 70, "The SDD interface is down, quantify the redundant interface so we can quantify the SDD interface!" },
                    { 37, 73, new DateTime(2023, 6, 16, 14, 17, 16, 601, DateTimeKind.Utc).AddTicks(224), 95, "calculating the bandwidth won't do anything, we need to navigate the haptic PCI bandwidth!" },
                    { 38, 45, new DateTime(2023, 6, 15, 21, 22, 36, 154, DateTimeKind.Utc).AddTicks(3799), 96, "navigating the driver won't do anything, we need to index the auxiliary SMTP driver!" },
                    { 39, 14, new DateTime(2023, 6, 15, 22, 59, 43, 482, DateTimeKind.Utc).AddTicks(9719), 37, "Try to input the XSS circuit, maybe it will input the virtual circuit!" },
                    { 40, 37, new DateTime(2023, 6, 15, 23, 0, 18, 602, DateTimeKind.Utc).AddTicks(3041), 3, "If we copy the port, we can get to the PCI port through the online PCI port!" },
                    { 41, 16, new DateTime(2023, 6, 15, 16, 59, 57, 228, DateTimeKind.Utc).AddTicks(7828), 66, "The HDD microchip is down, navigate the haptic microchip so we can navigate the HDD microchip!" },
                    { 42, 11, new DateTime(2023, 6, 15, 23, 31, 58, 955, DateTimeKind.Utc).AddTicks(9377), 22, "navigating the interface won't do anything, we need to back up the optical AI interface!" },
                    { 43, 33, new DateTime(2023, 6, 16, 3, 26, 32, 986, DateTimeKind.Utc).AddTicks(1259), 17, "You can't calculate the matrix without parsing the digital JSON matrix!" },
                    { 44, 85, new DateTime(2023, 6, 16, 13, 42, 30, 420, DateTimeKind.Utc).AddTicks(7227), 86, "You can't generate the transmitter without calculating the open-source PCI transmitter!" },
                    { 45, 36, new DateTime(2023, 6, 16, 1, 11, 50, 498, DateTimeKind.Utc).AddTicks(2406), 51, "We need to reboot the online XML transmitter!" },
                    { 46, 84, new DateTime(2023, 6, 16, 11, 59, 29, 354, DateTimeKind.Utc).AddTicks(9184), 84, "I'll program the digital SSL card, that should card the SSL card!" },
                    { 47, 80, new DateTime(2023, 6, 16, 6, 42, 0, 294, DateTimeKind.Utc).AddTicks(8761), 96, "We need to parse the multi-byte THX pixel!" },
                    { 48, 83, new DateTime(2023, 6, 16, 4, 4, 37, 498, DateTimeKind.Utc).AddTicks(9993), 57, "Use the open-source SSL feed, then you can bypass the open-source feed!" },
                    { 49, 97, new DateTime(2023, 6, 16, 9, 31, 14, 114, DateTimeKind.Utc).AddTicks(4401), 11, "Use the 1080p HTTP array, then you can parse the 1080p array!" },
                    { 50, 86, new DateTime(2023, 6, 15, 22, 3, 0, 505, DateTimeKind.Utc).AddTicks(9426), 78, "We need to connect the multi-byte PCI sensor!" },
                    { 51, 17, new DateTime(2023, 6, 15, 18, 44, 24, 18, DateTimeKind.Utc).AddTicks(4617), 17, "Try to override the CSS program, maybe it will override the cross-platform program!" },
                    { 52, 37, new DateTime(2023, 6, 16, 13, 8, 1, 372, DateTimeKind.Utc).AddTicks(3537), 60, "I'll back up the virtual SAS microchip, that should microchip the SAS microchip!" },
                    { 53, 28, new DateTime(2023, 6, 15, 21, 16, 52, 54, DateTimeKind.Utc).AddTicks(7824), 79, "The RSS alarm is down, reboot the redundant alarm so we can reboot the RSS alarm!" },
                    { 54, 85, new DateTime(2023, 6, 16, 2, 28, 41, 664, DateTimeKind.Utc).AddTicks(1661), 64, "You can't compress the interface without transmitting the multi-byte AGP interface!" },
                    { 55, 35, new DateTime(2023, 6, 16, 5, 50, 23, 905, DateTimeKind.Utc).AddTicks(9997), 56, "I'll input the primary USB pixel, that should pixel the USB pixel!" },
                    { 56, 68, new DateTime(2023, 6, 15, 20, 39, 19, 242, DateTimeKind.Utc).AddTicks(1102), 37, "Try to connect the CSS bandwidth, maybe it will connect the digital bandwidth!" },
                    { 57, 65, new DateTime(2023, 6, 16, 7, 17, 10, 47, DateTimeKind.Utc).AddTicks(3708), 61, "The USB driver is down, generate the solid state driver so we can generate the USB driver!" },
                    { 58, 98, new DateTime(2023, 6, 15, 17, 25, 52, 275, DateTimeKind.Utc).AddTicks(9316), 97, "Try to index the AGP port, maybe it will index the back-end port!" },
                    { 59, 41, new DateTime(2023, 6, 16, 4, 52, 37, 72, DateTimeKind.Utc).AddTicks(7109), 32, "We need to copy the multi-byte GB interface!" },
                    { 60, 70, new DateTime(2023, 6, 16, 1, 23, 54, 575, DateTimeKind.Utc).AddTicks(404), 9, "bypassing the circuit won't do anything, we need to connect the wireless SAS circuit!" },
                    { 61, 35, new DateTime(2023, 6, 15, 23, 30, 57, 564, DateTimeKind.Utc).AddTicks(6660), 4, "copying the microchip won't do anything, we need to connect the optical HTTP microchip!" },
                    { 62, 43, new DateTime(2023, 6, 16, 11, 54, 57, 664, DateTimeKind.Utc).AddTicks(2054), 10, "We need to program the redundant IB array!" },
                    { 63, 17, new DateTime(2023, 6, 16, 13, 57, 10, 604, DateTimeKind.Utc).AddTicks(8537), 65, "I'll bypass the digital HDD port, that should port the HDD port!" },
                    { 64, 22, new DateTime(2023, 6, 15, 18, 55, 9, 89, DateTimeKind.Utc).AddTicks(1027), 7, "Use the primary THX driver, then you can back up the primary driver!" },
                    { 65, 93, new DateTime(2023, 6, 15, 23, 48, 51, 285, DateTimeKind.Utc).AddTicks(8687), 20, "I'll generate the neural ADP driver, that should driver the ADP driver!" },
                    { 66, 43, new DateTime(2023, 6, 16, 0, 8, 4, 264, DateTimeKind.Utc).AddTicks(7970), 93, "Try to quantify the SSL sensor, maybe it will quantify the redundant sensor!" },
                    { 67, 43, new DateTime(2023, 6, 16, 1, 46, 3, 342, DateTimeKind.Utc).AddTicks(3625), 42, "We need to hack the auxiliary COM application!" },
                    { 68, 5, new DateTime(2023, 6, 16, 0, 15, 24, 281, DateTimeKind.Utc).AddTicks(6433), 12, "compressing the bandwidth won't do anything, we need to bypass the wireless PCI bandwidth!" },
                    { 69, 44, new DateTime(2023, 6, 16, 1, 53, 9, 466, DateTimeKind.Utc).AddTicks(3673), 50, "Use the auxiliary IB transmitter, then you can transmit the auxiliary transmitter!" },
                    { 70, 22, new DateTime(2023, 6, 16, 8, 12, 31, 350, DateTimeKind.Utc).AddTicks(1160), 69, "I'll back up the digital THX sensor, that should sensor the THX sensor!" },
                    { 71, 76, new DateTime(2023, 6, 15, 22, 19, 34, 394, DateTimeKind.Utc).AddTicks(9871), 63, "navigating the capacitor won't do anything, we need to parse the bluetooth IB capacitor!" },
                    { 72, 29, new DateTime(2023, 6, 16, 9, 23, 4, 12, DateTimeKind.Utc).AddTicks(2476), 48, "If we navigate the port, we can get to the SDD port through the auxiliary SDD port!" },
                    { 73, 100, new DateTime(2023, 6, 15, 22, 31, 22, 121, DateTimeKind.Utc).AddTicks(3189), 26, "copying the card won't do anything, we need to synthesize the solid state AGP card!" },
                    { 74, 79, new DateTime(2023, 6, 16, 9, 52, 30, 216, DateTimeKind.Utc).AddTicks(8833), 71, "We need to override the wireless THX protocol!" },
                    { 75, 35, new DateTime(2023, 6, 16, 3, 38, 50, 911, DateTimeKind.Utc).AddTicks(6785), 53, "We need to connect the auxiliary GB card!" },
                    { 76, 82, new DateTime(2023, 6, 15, 19, 41, 23, 855, DateTimeKind.Utc).AddTicks(5306), 5, "Try to hack the EXE pixel, maybe it will hack the online pixel!" },
                    { 77, 99, new DateTime(2023, 6, 16, 2, 27, 6, 893, DateTimeKind.Utc).AddTicks(8559), 97, "I'll hack the multi-byte SMTP transmitter, that should transmitter the SMTP transmitter!" },
                    { 78, 57, new DateTime(2023, 6, 15, 20, 53, 39, 579, DateTimeKind.Utc).AddTicks(3208), 31, "Use the digital XSS hard drive, then you can compress the digital hard drive!" },
                    { 79, 84, new DateTime(2023, 6, 16, 10, 7, 59, 956, DateTimeKind.Utc).AddTicks(224), 52, "Try to hack the IB protocol, maybe it will hack the wireless protocol!" },
                    { 80, 74, new DateTime(2023, 6, 16, 14, 20, 57, 554, DateTimeKind.Utc).AddTicks(670), 85, "I'll connect the online THX interface, that should interface the THX interface!" },
                    { 81, 62, new DateTime(2023, 6, 15, 21, 50, 57, 273, DateTimeKind.Utc).AddTicks(1657), 55, "The SCSI sensor is down, hack the optical sensor so we can hack the SCSI sensor!" },
                    { 82, 29, new DateTime(2023, 6, 16, 1, 51, 1, 228, DateTimeKind.Utc).AddTicks(748), 91, "If we program the bus, we can get to the AI bus through the wireless AI bus!" },
                    { 83, 70, new DateTime(2023, 6, 16, 16, 27, 56, 649, DateTimeKind.Utc).AddTicks(5805), 7, "You can't transmit the transmitter without quantifying the auxiliary SMS transmitter!" },
                    { 84, 55, new DateTime(2023, 6, 16, 6, 25, 4, 702, DateTimeKind.Utc).AddTicks(7129), 16, "You can't bypass the port without synthesizing the redundant SQL port!" },
                    { 85, 79, new DateTime(2023, 6, 15, 18, 53, 56, 569, DateTimeKind.Utc).AddTicks(7767), 55, "If we override the application, we can get to the SCSI application through the solid state SCSI application!" },
                    { 86, 43, new DateTime(2023, 6, 15, 23, 30, 41, 923, DateTimeKind.Utc).AddTicks(258), 26, "If we transmit the array, we can get to the JSON array through the mobile JSON array!" },
                    { 87, 72, new DateTime(2023, 6, 16, 7, 30, 54, 871, DateTimeKind.Utc).AddTicks(5864), 40, "The THX protocol is down, program the multi-byte protocol so we can program the THX protocol!" },
                    { 88, 3, new DateTime(2023, 6, 15, 22, 32, 52, 974, DateTimeKind.Utc).AddTicks(4144), 93, "We need to calculate the multi-byte PCI interface!" },
                    { 89, 71, new DateTime(2023, 6, 16, 9, 0, 13, 657, DateTimeKind.Utc).AddTicks(7495), 75, "Try to generate the JSON hard drive, maybe it will generate the back-end hard drive!" },
                    { 90, 97, new DateTime(2023, 6, 16, 16, 14, 48, 579, DateTimeKind.Utc).AddTicks(2542), 55, "Try to hack the THX bus, maybe it will hack the digital bus!" },
                    { 91, 59, new DateTime(2023, 6, 15, 23, 34, 13, 64, DateTimeKind.Utc).AddTicks(1628), 49, "You can't program the hard drive without indexing the multi-byte SAS hard drive!" },
                    { 92, 83, new DateTime(2023, 6, 15, 19, 31, 10, 894, DateTimeKind.Utc).AddTicks(3411), 79, "I'll input the online AI interface, that should interface the AI interface!" },
                    { 93, 74, new DateTime(2023, 6, 16, 15, 49, 13, 809, DateTimeKind.Utc).AddTicks(4485), 100, "If we override the monitor, we can get to the FTP monitor through the back-end FTP monitor!" },
                    { 94, 9, new DateTime(2023, 6, 15, 21, 5, 9, 948, DateTimeKind.Utc).AddTicks(4073), 43, "If we transmit the microchip, we can get to the FTP microchip through the mobile FTP microchip!" },
                    { 95, 86, new DateTime(2023, 6, 16, 13, 45, 22, 300, DateTimeKind.Utc).AddTicks(3849), 87, "I'll compress the back-end SSL interface, that should interface the SSL interface!" },
                    { 96, 39, new DateTime(2023, 6, 16, 2, 16, 56, 759, DateTimeKind.Utc).AddTicks(2841), 16, "Use the virtual EXE bandwidth, then you can navigate the virtual bandwidth!" },
                    { 97, 32, new DateTime(2023, 6, 16, 13, 28, 24, 158, DateTimeKind.Utc).AddTicks(6962), 53, "You can't compress the port without copying the primary SCSI port!" },
                    { 98, 66, new DateTime(2023, 6, 15, 22, 38, 9, 249, DateTimeKind.Utc).AddTicks(982), 55, "The SAS card is down, generate the redundant card so we can generate the SAS card!" },
                    { 99, 71, new DateTime(2023, 6, 16, 16, 5, 9, 185, DateTimeKind.Utc).AddTicks(6245), 40, "If we input the capacitor, we can get to the SQL capacitor through the wireless SQL capacitor!" },
                    { 100, 39, new DateTime(2023, 6, 16, 14, 25, 26, 196, DateTimeKind.Utc).AddTicks(4910), 17, "Try to connect the ADP port, maybe it will connect the virtual port!" }
                });

            migrationBuilder.InsertData(
                table: "Comment",
                columns: new[] { "Id", "CreatedAt", "GameId", "Text", "UserId" },
                values: new object[,]
                {
                    { 1, new DateTime(2023, 6, 16, 6, 0, 19, 174, DateTimeKind.Utc).AddTicks(2579), 50, "overriding the bus won't do anything, we need to transmit the bluetooth XSS bus!", 95 },
                    { 2, new DateTime(2023, 6, 16, 2, 6, 13, 568, DateTimeKind.Utc).AddTicks(2988), 17, "You can't bypass the capacitor without synthesizing the redundant USB capacitor!", 6 },
                    { 3, new DateTime(2023, 6, 15, 21, 34, 58, 844, DateTimeKind.Utc).AddTicks(1848), 31, "copying the pixel won't do anything, we need to quantify the multi-byte JSON pixel!", 45 },
                    { 4, new DateTime(2023, 6, 16, 9, 24, 13, 888, DateTimeKind.Utc).AddTicks(4743), 89, "I'll back up the mobile AI capacitor, that should capacitor the AI capacitor!", 4 },
                    { 5, new DateTime(2023, 6, 16, 12, 50, 2, 516, DateTimeKind.Utc).AddTicks(4688), 90, "If we generate the panel, we can get to the IB panel through the online IB panel!", 52 },
                    { 6, new DateTime(2023, 6, 16, 9, 39, 44, 721, DateTimeKind.Utc).AddTicks(8422), 29, "Use the haptic PCI circuit, then you can parse the haptic circuit!", 78 },
                    { 7, new DateTime(2023, 6, 16, 15, 32, 48, 283, DateTimeKind.Utc).AddTicks(5981), 98, "navigating the system won't do anything, we need to calculate the solid state SSL system!", 11 },
                    { 8, new DateTime(2023, 6, 16, 5, 14, 36, 433, DateTimeKind.Utc).AddTicks(8256), 72, "We need to compress the redundant AI capacitor!", 37 },
                    { 9, new DateTime(2023, 6, 16, 13, 1, 0, 106, DateTimeKind.Utc).AddTicks(1919), 13, "generating the application won't do anything, we need to parse the redundant SQL application!", 53 },
                    { 10, new DateTime(2023, 6, 15, 17, 55, 49, 11, DateTimeKind.Utc).AddTicks(3895), 28, "The RSS array is down, quantify the redundant array so we can quantify the RSS array!", 52 },
                    { 11, new DateTime(2023, 6, 15, 19, 31, 5, 137, DateTimeKind.Utc).AddTicks(8617), 86, "I'll input the primary SCSI sensor, that should sensor the SCSI sensor!", 31 },
                    { 12, new DateTime(2023, 6, 16, 1, 4, 1, 403, DateTimeKind.Utc).AddTicks(2701), 71, "We need to transmit the back-end SMTP circuit!", 40 },
                    { 13, new DateTime(2023, 6, 16, 13, 52, 35, 579, DateTimeKind.Utc).AddTicks(2079), 5, "connecting the program won't do anything, we need to reboot the online GB program!", 81 },
                    { 14, new DateTime(2023, 6, 16, 8, 1, 54, 430, DateTimeKind.Utc).AddTicks(4805), 9, "compressing the program won't do anything, we need to generate the mobile JBOD program!", 26 },
                    { 15, new DateTime(2023, 6, 16, 16, 45, 0, 900, DateTimeKind.Utc).AddTicks(437), 44, "You can't quantify the port without programming the primary SMTP port!", 7 },
                    { 16, new DateTime(2023, 6, 16, 4, 10, 46, 21, DateTimeKind.Utc).AddTicks(3872), 16, "If we input the bandwidth, we can get to the JBOD bandwidth through the primary JBOD bandwidth!", 24 },
                    { 17, new DateTime(2023, 6, 15, 20, 40, 40, 660, DateTimeKind.Utc).AddTicks(3279), 56, "Use the digital XML microchip, then you can hack the digital microchip!", 2 },
                    { 18, new DateTime(2023, 6, 16, 11, 38, 35, 279, DateTimeKind.Utc).AddTicks(7989), 27, "The IB pixel is down, bypass the digital pixel so we can bypass the IB pixel!", 87 },
                    { 19, new DateTime(2023, 6, 16, 13, 56, 10, 331, DateTimeKind.Utc).AddTicks(2122), 46, "Try to generate the PNG system, maybe it will generate the multi-byte system!", 61 },
                    { 20, new DateTime(2023, 6, 16, 9, 28, 28, 651, DateTimeKind.Utc).AddTicks(9409), 37, "hacking the firewall won't do anything, we need to copy the 1080p JSON firewall!", 4 },
                    { 21, new DateTime(2023, 6, 16, 14, 1, 58, 185, DateTimeKind.Utc).AddTicks(1010), 35, "We need to navigate the cross-platform EXE monitor!", 59 },
                    { 22, new DateTime(2023, 6, 16, 4, 19, 13, 491, DateTimeKind.Utc).AddTicks(6592), 81, "The XML sensor is down, connect the neural sensor so we can connect the XML sensor!", 38 },
                    { 23, new DateTime(2023, 6, 16, 10, 29, 15, 817, DateTimeKind.Utc).AddTicks(7953), 77, "We need to quantify the wireless XSS alarm!", 100 },
                    { 24, new DateTime(2023, 6, 16, 16, 35, 15, 361, DateTimeKind.Utc).AddTicks(4968), 31, "You can't input the program without calculating the solid state PCI program!", 2 },
                    { 25, new DateTime(2023, 6, 16, 14, 59, 37, 385, DateTimeKind.Utc).AddTicks(3841), 86, "We need to copy the primary XML matrix!", 10 },
                    { 26, new DateTime(2023, 6, 16, 8, 34, 6, 624, DateTimeKind.Utc).AddTicks(668), 23, "The XML driver is down, transmit the wireless driver so we can transmit the XML driver!", 51 },
                    { 27, new DateTime(2023, 6, 15, 20, 14, 25, 267, DateTimeKind.Utc).AddTicks(9477), 79, "Try to compress the SMS card, maybe it will compress the optical card!", 89 },
                    { 28, new DateTime(2023, 6, 16, 3, 40, 1, 539, DateTimeKind.Utc).AddTicks(4471), 26, "The HDD pixel is down, synthesize the redundant pixel so we can synthesize the HDD pixel!", 7 },
                    { 29, new DateTime(2023, 6, 15, 21, 45, 56, 799, DateTimeKind.Utc).AddTicks(5765), 19, "We need to generate the haptic SQL port!", 35 },
                    { 30, new DateTime(2023, 6, 16, 3, 54, 14, 993, DateTimeKind.Utc).AddTicks(9600), 41, "If we quantify the array, we can get to the ADP array through the multi-byte ADP array!", 83 },
                    { 31, new DateTime(2023, 6, 15, 21, 56, 22, 799, DateTimeKind.Utc).AddTicks(2055), 57, "backing up the protocol won't do anything, we need to quantify the multi-byte AGP protocol!", 91 },
                    { 32, new DateTime(2023, 6, 16, 8, 16, 58, 249, DateTimeKind.Utc).AddTicks(785), 62, "Use the primary PCI microchip, then you can calculate the primary microchip!", 37 },
                    { 33, new DateTime(2023, 6, 16, 2, 24, 27, 434, DateTimeKind.Utc).AddTicks(3378), 39, "bypassing the array won't do anything, we need to synthesize the digital ADP array!", 44 },
                    { 34, new DateTime(2023, 6, 16, 8, 54, 31, 240, DateTimeKind.Utc).AddTicks(6032), 57, "If we copy the system, we can get to the SQL system through the cross-platform SQL system!", 70 },
                    { 35, new DateTime(2023, 6, 16, 5, 47, 13, 588, DateTimeKind.Utc).AddTicks(2909), 20, "The SMTP protocol is down, parse the online protocol so we can parse the SMTP protocol!", 5 },
                    { 36, new DateTime(2023, 6, 16, 7, 12, 51, 898, DateTimeKind.Utc).AddTicks(9610), 32, "Use the redundant SMTP sensor, then you can connect the redundant sensor!", 53 },
                    { 37, new DateTime(2023, 6, 16, 11, 24, 15, 772, DateTimeKind.Utc).AddTicks(4976), 94, "If we compress the system, we can get to the SSL system through the mobile SSL system!", 67 },
                    { 38, new DateTime(2023, 6, 15, 21, 22, 35, 404, DateTimeKind.Utc).AddTicks(6506), 93, "You can't reboot the firewall without generating the back-end HTTP firewall!", 20 },
                    { 39, new DateTime(2023, 6, 16, 3, 5, 59, 761, DateTimeKind.Utc).AddTicks(6203), 30, "If we back up the firewall, we can get to the ADP firewall through the open-source ADP firewall!", 9 },
                    { 40, new DateTime(2023, 6, 15, 18, 41, 19, 631, DateTimeKind.Utc).AddTicks(9836), 57, "I'll override the haptic FTP feed, that should feed the FTP feed!", 94 },
                    { 41, new DateTime(2023, 6, 16, 0, 39, 46, 920, DateTimeKind.Utc).AddTicks(395), 33, "I'll index the open-source XSS circuit, that should circuit the XSS circuit!", 92 },
                    { 42, new DateTime(2023, 6, 16, 15, 31, 29, 771, DateTimeKind.Utc).AddTicks(3914), 16, "Try to bypass the PCI driver, maybe it will bypass the digital driver!", 32 },
                    { 43, new DateTime(2023, 6, 16, 7, 43, 30, 138, DateTimeKind.Utc).AddTicks(2331), 49, "Use the digital EXE circuit, then you can input the digital circuit!", 73 },
                    { 44, new DateTime(2023, 6, 15, 19, 47, 14, 673, DateTimeKind.Utc).AddTicks(2893), 6, "You can't index the feed without synthesizing the solid state TCP feed!", 45 },
                    { 45, new DateTime(2023, 6, 15, 17, 55, 11, 808, DateTimeKind.Utc).AddTicks(799), 78, "Try to reboot the XML transmitter, maybe it will reboot the auxiliary transmitter!", 99 },
                    { 46, new DateTime(2023, 6, 16, 13, 5, 55, 729, DateTimeKind.Utc).AddTicks(5708), 82, "I'll quantify the virtual GB interface, that should interface the GB interface!", 80 },
                    { 47, new DateTime(2023, 6, 15, 23, 5, 35, 2, DateTimeKind.Utc).AddTicks(123), 13, "backing up the pixel won't do anything, we need to generate the virtual PCI pixel!", 44 },
                    { 48, new DateTime(2023, 6, 16, 6, 34, 10, 824, DateTimeKind.Utc).AddTicks(9178), 87, "We need to reboot the optical JSON sensor!", 22 },
                    { 49, new DateTime(2023, 6, 16, 3, 5, 57, 173, DateTimeKind.Utc).AddTicks(1309), 69, "If we synthesize the panel, we can get to the PNG panel through the neural PNG panel!", 22 },
                    { 50, new DateTime(2023, 6, 15, 23, 26, 37, 901, DateTimeKind.Utc).AddTicks(4120), 36, "We need to index the open-source CSS bandwidth!", 97 },
                    { 51, new DateTime(2023, 6, 15, 20, 18, 5, 42, DateTimeKind.Utc).AddTicks(2255), 60, "indexing the monitor won't do anything, we need to copy the online AGP monitor!", 65 },
                    { 52, new DateTime(2023, 6, 15, 23, 20, 52, 70, DateTimeKind.Utc).AddTicks(9714), 75, "I'll connect the solid state CSS microchip, that should microchip the CSS microchip!", 21 },
                    { 53, new DateTime(2023, 6, 16, 8, 7, 46, 62, DateTimeKind.Utc).AddTicks(1665), 91, "The IB circuit is down, quantify the multi-byte circuit so we can quantify the IB circuit!", 46 },
                    { 54, new DateTime(2023, 6, 15, 19, 58, 2, 500, DateTimeKind.Utc).AddTicks(2085), 35, "The AI panel is down, override the cross-platform panel so we can override the AI panel!", 87 },
                    { 55, new DateTime(2023, 6, 16, 2, 29, 45, 469, DateTimeKind.Utc).AddTicks(1151), 59, "The PCI panel is down, input the primary panel so we can input the PCI panel!", 33 },
                    { 56, new DateTime(2023, 6, 15, 19, 32, 52, 701, DateTimeKind.Utc).AddTicks(9382), 39, "I'll back up the mobile SAS bandwidth, that should bandwidth the SAS bandwidth!", 40 },
                    { 57, new DateTime(2023, 6, 16, 1, 51, 23, 69, DateTimeKind.Utc).AddTicks(9201), 65, "calculating the circuit won't do anything, we need to program the mobile SQL circuit!", 37 },
                    { 58, new DateTime(2023, 6, 16, 7, 32, 46, 39, DateTimeKind.Utc).AddTicks(4307), 38, "The FTP monitor is down, quantify the neural monitor so we can quantify the FTP monitor!", 65 },
                    { 59, new DateTime(2023, 6, 16, 6, 8, 33, 396, DateTimeKind.Utc).AddTicks(2518), 62, "Use the multi-byte THX panel, then you can back up the multi-byte panel!", 33 },
                    { 60, new DateTime(2023, 6, 15, 23, 50, 14, 823, DateTimeKind.Utc).AddTicks(5073), 1, "Try to reboot the IB card, maybe it will reboot the mobile card!", 50 },
                    { 61, new DateTime(2023, 6, 16, 2, 52, 13, 624, DateTimeKind.Utc).AddTicks(7396), 39, "The JBOD interface is down, copy the open-source interface so we can copy the JBOD interface!", 14 },
                    { 62, new DateTime(2023, 6, 16, 11, 23, 2, 791, DateTimeKind.Utc).AddTicks(9241), 45, "compressing the card won't do anything, we need to compress the primary SQL card!", 58 },
                    { 63, new DateTime(2023, 6, 15, 22, 13, 20, 450, DateTimeKind.Utc).AddTicks(9468), 34, "Use the virtual RAM firewall, then you can reboot the virtual firewall!", 10 },
                    { 64, new DateTime(2023, 6, 15, 20, 59, 43, 344, DateTimeKind.Utc).AddTicks(2107), 37, "Use the wireless SCSI alarm, then you can reboot the wireless alarm!", 81 },
                    { 65, new DateTime(2023, 6, 16, 2, 18, 13, 379, DateTimeKind.Utc).AddTicks(1344), 68, "Use the solid state USB application, then you can override the solid state application!", 23 },
                    { 66, new DateTime(2023, 6, 15, 22, 52, 13, 117, DateTimeKind.Utc).AddTicks(6942), 44, "Try to connect the TCP transmitter, maybe it will connect the mobile transmitter!", 51 },
                    { 67, new DateTime(2023, 6, 15, 19, 53, 19, 917, DateTimeKind.Utc).AddTicks(6566), 73, "Try to index the XSS protocol, maybe it will index the open-source protocol!", 28 },
                    { 68, new DateTime(2023, 6, 16, 7, 52, 9, 408, DateTimeKind.Utc).AddTicks(5275), 81, "The GB circuit is down, compress the online circuit so we can compress the GB circuit!", 34 },
                    { 69, new DateTime(2023, 6, 15, 22, 36, 4, 395, DateTimeKind.Utc).AddTicks(7811), 15, "You can't navigate the bus without copying the open-source SCSI bus!", 10 },
                    { 70, new DateTime(2023, 6, 16, 6, 36, 28, 251, DateTimeKind.Utc).AddTicks(7140), 13, "If we copy the capacitor, we can get to the XML capacitor through the online XML capacitor!", 70 },
                    { 71, new DateTime(2023, 6, 16, 8, 33, 27, 947, DateTimeKind.Utc).AddTicks(2620), 13, "parsing the sensor won't do anything, we need to connect the neural RAM sensor!", 71 },
                    { 72, new DateTime(2023, 6, 16, 10, 59, 17, 846, DateTimeKind.Utc).AddTicks(1176), 37, "You can't copy the interface without navigating the virtual IB interface!", 8 },
                    { 73, new DateTime(2023, 6, 16, 3, 56, 6, 388, DateTimeKind.Utc).AddTicks(4383), 53, "We need to parse the cross-platform SMTP program!", 9 },
                    { 74, new DateTime(2023, 6, 15, 18, 1, 10, 808, DateTimeKind.Utc).AddTicks(1973), 43, "We need to calculate the back-end SCSI transmitter!", 98 },
                    { 75, new DateTime(2023, 6, 16, 12, 13, 18, 18, DateTimeKind.Utc).AddTicks(7255), 18, "We need to quantify the digital AI program!", 32 },
                    { 76, new DateTime(2023, 6, 16, 8, 27, 37, 118, DateTimeKind.Utc).AddTicks(7031), 23, "You can't generate the sensor without calculating the multi-byte XML sensor!", 10 },
                    { 77, new DateTime(2023, 6, 16, 3, 47, 43, 599, DateTimeKind.Utc).AddTicks(1206), 98, "You can't program the array without generating the back-end JSON array!", 93 },
                    { 78, new DateTime(2023, 6, 16, 7, 4, 1, 54, DateTimeKind.Utc).AddTicks(5705), 55, "Try to synthesize the JBOD port, maybe it will synthesize the multi-byte port!", 21 },
                    { 79, new DateTime(2023, 6, 16, 3, 38, 22, 779, DateTimeKind.Utc).AddTicks(6094), 35, "We need to bypass the online HDD capacitor!", 5 },
                    { 80, new DateTime(2023, 6, 15, 22, 58, 27, 606, DateTimeKind.Utc).AddTicks(5798), 79, "If we compress the microchip, we can get to the XML microchip through the haptic XML microchip!", 94 },
                    { 81, new DateTime(2023, 6, 16, 1, 38, 9, 529, DateTimeKind.Utc).AddTicks(1440), 51, "You can't transmit the capacitor without generating the wireless HTTP capacitor!", 42 },
                    { 82, new DateTime(2023, 6, 15, 23, 42, 14, 64, DateTimeKind.Utc).AddTicks(2453), 18, "If we override the system, we can get to the JBOD system through the digital JBOD system!", 16 },
                    { 83, new DateTime(2023, 6, 16, 16, 18, 22, 138, DateTimeKind.Utc).AddTicks(7996), 13, "I'll transmit the virtual RSS sensor, that should sensor the RSS sensor!", 73 },
                    { 84, new DateTime(2023, 6, 16, 5, 14, 52, 386, DateTimeKind.Utc).AddTicks(7318), 88, "We need to index the wireless HDD matrix!", 37 },
                    { 85, new DateTime(2023, 6, 16, 9, 47, 19, 16, DateTimeKind.Utc).AddTicks(6206), 56, "Use the primary AGP firewall, then you can input the primary firewall!", 77 },
                    { 86, new DateTime(2023, 6, 16, 5, 37, 9, 723, DateTimeKind.Utc).AddTicks(1135), 2, "You can't calculate the bandwidth without navigating the multi-byte RSS bandwidth!", 65 },
                    { 87, new DateTime(2023, 6, 15, 21, 43, 14, 479, DateTimeKind.Utc).AddTicks(9268), 70, "Try to copy the SSL circuit, maybe it will copy the bluetooth circuit!", 21 },
                    { 88, new DateTime(2023, 6, 16, 0, 39, 54, 127, DateTimeKind.Utc).AddTicks(4687), 40, "You can't reboot the bus without parsing the 1080p PNG bus!", 29 },
                    { 89, new DateTime(2023, 6, 16, 11, 54, 12, 811, DateTimeKind.Utc).AddTicks(650), 37, "Use the solid state HDD matrix, then you can connect the solid state matrix!", 28 },
                    { 90, new DateTime(2023, 6, 16, 5, 3, 23, 495, DateTimeKind.Utc).AddTicks(4619), 87, "If we navigate the driver, we can get to the XML driver through the neural XML driver!", 40 },
                    { 91, new DateTime(2023, 6, 16, 16, 6, 7, 432, DateTimeKind.Utc).AddTicks(5243), 93, "I'll input the optical THX driver, that should driver the THX driver!", 49 },
                    { 92, new DateTime(2023, 6, 16, 4, 57, 6, 768, DateTimeKind.Utc).AddTicks(6861), 51, "connecting the firewall won't do anything, we need to navigate the 1080p RAM firewall!", 53 },
                    { 93, new DateTime(2023, 6, 15, 20, 28, 58, 832, DateTimeKind.Utc).AddTicks(5899), 74, "You can't input the microchip without copying the primary XSS microchip!", 21 },
                    { 94, new DateTime(2023, 6, 16, 3, 27, 32, 48, DateTimeKind.Utc).AddTicks(2547), 40, "We need to back up the solid state SSL interface!", 28 },
                    { 95, new DateTime(2023, 6, 16, 0, 30, 10, 823, DateTimeKind.Utc).AddTicks(7783), 51, "If we bypass the feed, we can get to the ADP feed through the multi-byte ADP feed!", 32 },
                    { 96, new DateTime(2023, 6, 16, 8, 15, 25, 485, DateTimeKind.Utc).AddTicks(4283), 78, "Try to override the COM port, maybe it will override the back-end port!", 90 },
                    { 97, new DateTime(2023, 6, 16, 12, 15, 30, 309, DateTimeKind.Utc).AddTicks(2340), 78, "The TCP bandwidth is down, override the haptic bandwidth so we can override the TCP bandwidth!", 59 },
                    { 98, new DateTime(2023, 6, 15, 17, 4, 25, 78, DateTimeKind.Utc).AddTicks(2031), 7, "You can't navigate the microchip without connecting the back-end SMTP microchip!", 11 },
                    { 99, new DateTime(2023, 6, 16, 11, 52, 36, 652, DateTimeKind.Utc).AddTicks(3369), 31, "You can't synthesize the application without synthesizing the multi-byte EXE application!", 40 },
                    { 100, new DateTime(2023, 6, 16, 8, 32, 8, 800, DateTimeKind.Utc).AddTicks(3680), 96, "You can't copy the panel without bypassing the primary RAM panel!", 48 }
                });

            migrationBuilder.InsertData(
                table: "Rating",
                columns: new[] { "Id", "GameId", "UserId", "Value" },
                values: new object[,]
                {
                    { 1, 56, 30, 3 },
                    { 2, 43, 57, 4 },
                    { 3, 77, 16, 5 },
                    { 4, 63, 77, 3 },
                    { 5, 41, 16, 3 },
                    { 6, 24, 11, 5 },
                    { 7, 95, 24, 3 },
                    { 8, 41, 86, 2 },
                    { 9, 75, 54, 3 },
                    { 10, 53, 57, 4 },
                    { 11, 48, 35, 4 },
                    { 12, 62, 20, 2 },
                    { 13, 20, 71, 2 },
                    { 14, 45, 84, 1 },
                    { 15, 17, 81, 3 },
                    { 16, 6, 58, 3 },
                    { 17, 84, 43, 2 },
                    { 18, 52, 63, 2 },
                    { 19, 77, 96, 2 },
                    { 20, 29, 12, 5 },
                    { 21, 25, 85, 2 },
                    { 22, 72, 10, 2 },
                    { 23, 64, 25, 2 },
                    { 24, 66, 51, 5 },
                    { 25, 71, 31, 4 },
                    { 26, 2, 23, 2 },
                    { 27, 78, 56, 4 },
                    { 28, 88, 78, 2 },
                    { 29, 71, 39, 4 },
                    { 30, 65, 34, 1 },
                    { 31, 31, 91, 5 },
                    { 32, 23, 29, 2 },
                    { 33, 7, 66, 5 },
                    { 34, 89, 14, 5 },
                    { 35, 77, 45, 3 },
                    { 36, 26, 30, 4 },
                    { 37, 10, 44, 4 },
                    { 38, 55, 97, 4 },
                    { 39, 29, 78, 1 },
                    { 40, 6, 43, 1 },
                    { 41, 59, 8, 4 },
                    { 42, 57, 70, 2 },
                    { 43, 19, 90, 4 },
                    { 44, 3, 16, 4 },
                    { 45, 89, 34, 5 },
                    { 46, 48, 10, 5 },
                    { 47, 9, 61, 1 },
                    { 48, 1, 32, 4 },
                    { 49, 21, 14, 2 },
                    { 50, 71, 85, 1 },
                    { 51, 25, 38, 5 },
                    { 52, 73, 45, 4 },
                    { 53, 87, 15, 4 },
                    { 54, 87, 53, 4 },
                    { 55, 13, 11, 4 },
                    { 56, 39, 16, 3 },
                    { 57, 100, 34, 2 },
                    { 58, 100, 21, 2 },
                    { 59, 90, 67, 4 },
                    { 60, 90, 36, 4 },
                    { 61, 38, 63, 4 },
                    { 62, 33, 27, 3 },
                    { 63, 15, 75, 1 },
                    { 64, 88, 68, 4 },
                    { 65, 89, 6, 1 },
                    { 66, 94, 26, 5 },
                    { 67, 75, 51, 3 },
                    { 68, 33, 86, 5 },
                    { 69, 12, 3, 2 },
                    { 70, 15, 81, 4 },
                    { 71, 10, 89, 3 },
                    { 72, 45, 92, 2 },
                    { 73, 63, 70, 3 },
                    { 74, 6, 27, 1 },
                    { 75, 4, 89, 1 },
                    { 76, 10, 66, 3 },
                    { 77, 79, 30, 4 },
                    { 78, 57, 47, 3 },
                    { 79, 96, 45, 1 },
                    { 80, 81, 91, 1 },
                    { 81, 89, 12, 2 },
                    { 82, 91, 99, 2 },
                    { 83, 52, 10, 5 },
                    { 84, 22, 34, 3 },
                    { 85, 97, 73, 4 },
                    { 86, 91, 3, 2 },
                    { 87, 62, 39, 5 },
                    { 88, 62, 13, 1 },
                    { 89, 62, 64, 1 },
                    { 90, 44, 32, 2 },
                    { 91, 41, 65, 2 },
                    { 92, 5, 52, 3 },
                    { 93, 46, 97, 1 },
                    { 94, 7, 98, 3 },
                    { 95, 8, 27, 2 },
                    { 96, 24, 24, 5 },
                    { 97, 95, 49, 4 },
                    { 98, 47, 69, 4 },
                    { 99, 62, 50, 5 },
                    { 100, 60, 73, 1 }
                });

            migrationBuilder.InsertData(
                table: "UserGame",
                columns: new[] { "CreatedAt", "GameId", "UserId", "Score" },
                values: new object[,]
                {
                    { new DateTime(2023, 6, 15, 20, 59, 52, 159, DateTimeKind.Utc).AddTicks(9677), 96, 1, 2 },
                    { new DateTime(2023, 6, 16, 7, 20, 21, 54, DateTimeKind.Utc).AddTicks(7671), 77, 3, 3 },
                    { new DateTime(2023, 6, 16, 10, 4, 53, 338, DateTimeKind.Utc).AddTicks(8770), 39, 4, 4 },
                    { new DateTime(2023, 6, 16, 14, 20, 29, 156, DateTimeKind.Utc).AddTicks(1099), 79, 4, 7 },
                    { new DateTime(2023, 6, 15, 18, 33, 11, 491, DateTimeKind.Utc).AddTicks(8802), 30, 5, 6 },
                    { new DateTime(2023, 6, 15, 21, 48, 17, 410, DateTimeKind.Utc).AddTicks(5453), 41, 5, 9 },
                    { new DateTime(2023, 6, 16, 5, 50, 46, 742, DateTimeKind.Utc).AddTicks(3768), 84, 5, 8 },
                    { new DateTime(2023, 6, 15, 23, 17, 6, 573, DateTimeKind.Utc).AddTicks(7011), 85, 5, 3 },
                    { new DateTime(2023, 6, 16, 3, 57, 52, 709, DateTimeKind.Utc).AddTicks(8716), 99, 5, 9 },
                    { new DateTime(2023, 6, 15, 22, 18, 17, 906, DateTimeKind.Utc).AddTicks(5403), 37, 7, 2 },
                    { new DateTime(2023, 6, 16, 0, 30, 15, 965, DateTimeKind.Utc).AddTicks(3964), 5, 8, 8 },
                    { new DateTime(2023, 6, 15, 17, 6, 55, 632, DateTimeKind.Utc).AddTicks(1970), 30, 9, 8 },
                    { new DateTime(2023, 6, 16, 16, 23, 21, 633, DateTimeKind.Utc).AddTicks(6337), 97, 9, 10 },
                    { new DateTime(2023, 6, 16, 7, 56, 29, 737, DateTimeKind.Utc).AddTicks(9944), 45, 10, 4 },
                    { new DateTime(2023, 6, 16, 13, 42, 12, 752, DateTimeKind.Utc).AddTicks(4459), 92, 10, 1 },
                    { new DateTime(2023, 6, 16, 11, 45, 14, 909, DateTimeKind.Utc).AddTicks(7758), 3, 11, 6 },
                    { new DateTime(2023, 6, 15, 20, 7, 58, 114, DateTimeKind.Utc).AddTicks(5420), 33, 12, 10 },
                    { new DateTime(2023, 6, 15, 22, 2, 22, 609, DateTimeKind.Utc).AddTicks(6893), 83, 12, 1 },
                    { new DateTime(2023, 6, 15, 18, 24, 36, 222, DateTimeKind.Utc).AddTicks(633), 10, 14, 10 },
                    { new DateTime(2023, 6, 16, 15, 19, 8, 379, DateTimeKind.Utc).AddTicks(4811), 92, 14, 8 },
                    { new DateTime(2023, 6, 16, 14, 38, 34, 468, DateTimeKind.Utc).AddTicks(8051), 78, 15, 4 },
                    { new DateTime(2023, 6, 16, 13, 58, 31, 768, DateTimeKind.Utc).AddTicks(9295), 7, 17, 7 },
                    { new DateTime(2023, 6, 15, 23, 36, 34, 239, DateTimeKind.Utc).AddTicks(4144), 33, 18, 9 },
                    { new DateTime(2023, 6, 16, 11, 57, 4, 798, DateTimeKind.Utc).AddTicks(8800), 88, 19, 8 },
                    { new DateTime(2023, 6, 16, 9, 30, 56, 971, DateTimeKind.Utc).AddTicks(2870), 8, 21, 4 },
                    { new DateTime(2023, 6, 16, 1, 17, 25, 870, DateTimeKind.Utc).AddTicks(3378), 98, 22, 8 },
                    { new DateTime(2023, 6, 16, 6, 28, 29, 14, DateTimeKind.Utc).AddTicks(7728), 88, 23, 6 },
                    { new DateTime(2023, 6, 15, 23, 26, 48, 706, DateTimeKind.Utc).AddTicks(7761), 93, 23, 3 },
                    { new DateTime(2023, 6, 15, 23, 52, 13, 512, DateTimeKind.Utc).AddTicks(3572), 99, 23, 10 },
                    { new DateTime(2023, 6, 15, 23, 15, 8, 152, DateTimeKind.Utc).AddTicks(198), 53, 24, 1 },
                    { new DateTime(2023, 6, 15, 20, 56, 13, 972, DateTimeKind.Utc).AddTicks(8381), 28, 27, 4 },
                    { new DateTime(2023, 6, 15, 23, 5, 54, 528, DateTimeKind.Utc).AddTicks(1960), 35, 27, 2 },
                    { new DateTime(2023, 6, 16, 14, 13, 4, 648, DateTimeKind.Utc).AddTicks(4812), 63, 28, 4 },
                    { new DateTime(2023, 6, 16, 16, 40, 6, 201, DateTimeKind.Utc).AddTicks(4033), 84, 28, 10 },
                    { new DateTime(2023, 6, 15, 22, 12, 40, 886, DateTimeKind.Utc).AddTicks(9993), 53, 29, 3 },
                    { new DateTime(2023, 6, 16, 2, 11, 5, 307, DateTimeKind.Utc).AddTicks(5626), 8, 32, 10 },
                    { new DateTime(2023, 6, 16, 12, 54, 15, 279, DateTimeKind.Utc).AddTicks(5299), 57, 34, 8 },
                    { new DateTime(2023, 6, 16, 4, 19, 7, 89, DateTimeKind.Utc).AddTicks(7262), 97, 34, 4 },
                    { new DateTime(2023, 6, 15, 22, 59, 38, 191, DateTimeKind.Utc).AddTicks(1146), 30, 35, 9 },
                    { new DateTime(2023, 6, 16, 2, 48, 50, 637, DateTimeKind.Utc).AddTicks(7460), 75, 36, 2 },
                    { new DateTime(2023, 6, 16, 4, 41, 39, 591, DateTimeKind.Utc).AddTicks(149), 36, 37, 5 },
                    { new DateTime(2023, 6, 15, 22, 4, 22, 489, DateTimeKind.Utc).AddTicks(6127), 40, 39, 5 },
                    { new DateTime(2023, 6, 16, 15, 17, 7, 713, DateTimeKind.Utc).AddTicks(6092), 67, 42, 6 },
                    { new DateTime(2023, 6, 15, 21, 37, 52, 422, DateTimeKind.Utc).AddTicks(4075), 59, 43, 10 },
                    { new DateTime(2023, 6, 15, 20, 10, 18, 460, DateTimeKind.Utc).AddTicks(4162), 4, 45, 3 },
                    { new DateTime(2023, 6, 16, 15, 23, 40, 89, DateTimeKind.Utc).AddTicks(3431), 20, 46, 2 },
                    { new DateTime(2023, 6, 16, 7, 24, 24, 192, DateTimeKind.Utc).AddTicks(3278), 75, 47, 7 },
                    { new DateTime(2023, 6, 16, 4, 15, 28, 825, DateTimeKind.Utc).AddTicks(975), 5, 48, 1 },
                    { new DateTime(2023, 6, 16, 14, 51, 1, 303, DateTimeKind.Utc).AddTicks(2750), 19, 48, 1 },
                    { new DateTime(2023, 6, 15, 21, 12, 8, 245, DateTimeKind.Utc).AddTicks(300), 50, 48, 10 },
                    { new DateTime(2023, 6, 15, 22, 27, 2, 636, DateTimeKind.Utc).AddTicks(9344), 52, 48, 5 },
                    { new DateTime(2023, 6, 16, 16, 5, 54, 256, DateTimeKind.Utc).AddTicks(4351), 75, 48, 4 },
                    { new DateTime(2023, 6, 16, 10, 51, 56, 926, DateTimeKind.Utc).AddTicks(1239), 38, 50, 1 },
                    { new DateTime(2023, 6, 16, 12, 26, 50, 453, DateTimeKind.Utc).AddTicks(3495), 94, 50, 7 },
                    { new DateTime(2023, 6, 15, 20, 50, 0, 929, DateTimeKind.Utc).AddTicks(1226), 12, 51, 9 },
                    { new DateTime(2023, 6, 15, 18, 31, 28, 353, DateTimeKind.Utc).AddTicks(8087), 42, 51, 5 },
                    { new DateTime(2023, 6, 16, 6, 48, 21, 693, DateTimeKind.Utc).AddTicks(5935), 90, 53, 4 },
                    { new DateTime(2023, 6, 15, 17, 24, 18, 733, DateTimeKind.Utc).AddTicks(1892), 10, 57, 4 },
                    { new DateTime(2023, 6, 16, 4, 39, 38, 133, DateTimeKind.Utc).AddTicks(1618), 82, 57, 3 },
                    { new DateTime(2023, 6, 15, 23, 48, 30, 490, DateTimeKind.Utc).AddTicks(7227), 47, 58, 3 },
                    { new DateTime(2023, 6, 15, 18, 22, 10, 282, DateTimeKind.Utc).AddTicks(5551), 31, 60, 6 },
                    { new DateTime(2023, 6, 15, 19, 4, 5, 82, DateTimeKind.Utc).AddTicks(6753), 72, 60, 4 },
                    { new DateTime(2023, 6, 16, 4, 32, 46, 800, DateTimeKind.Utc).AddTicks(638), 72, 61, 5 },
                    { new DateTime(2023, 6, 15, 16, 58, 47, 417, DateTimeKind.Utc).AddTicks(6074), 16, 63, 9 },
                    { new DateTime(2023, 6, 15, 22, 11, 43, 256, DateTimeKind.Utc).AddTicks(9220), 61, 64, 8 },
                    { new DateTime(2023, 6, 15, 20, 30, 0, 303, DateTimeKind.Utc).AddTicks(9339), 6, 65, 5 },
                    { new DateTime(2023, 6, 16, 11, 11, 46, 612, DateTimeKind.Utc).AddTicks(477), 24, 65, 6 },
                    { new DateTime(2023, 6, 15, 21, 29, 5, 567, DateTimeKind.Utc).AddTicks(4294), 97, 65, 1 },
                    { new DateTime(2023, 6, 16, 5, 36, 22, 704, DateTimeKind.Utc).AddTicks(2985), 23, 66, 1 },
                    { new DateTime(2023, 6, 15, 17, 39, 14, 95, DateTimeKind.Utc).AddTicks(5889), 69, 66, 9 },
                    { new DateTime(2023, 6, 16, 11, 48, 37, 932, DateTimeKind.Utc).AddTicks(2323), 85, 66, 10 },
                    { new DateTime(2023, 6, 16, 7, 53, 41, 978, DateTimeKind.Utc).AddTicks(4532), 99, 66, 4 },
                    { new DateTime(2023, 6, 16, 10, 11, 16, 746, DateTimeKind.Utc).AddTicks(9922), 10, 68, 10 },
                    { new DateTime(2023, 6, 16, 1, 7, 43, 672, DateTimeKind.Utc).AddTicks(9362), 64, 68, 7 },
                    { new DateTime(2023, 6, 16, 8, 45, 54, 799, DateTimeKind.Utc).AddTicks(334), 84, 70, 6 },
                    { new DateTime(2023, 6, 15, 22, 21, 59, 396, DateTimeKind.Utc).AddTicks(5181), 72, 71, 1 },
                    { new DateTime(2023, 6, 16, 16, 25, 52, 979, DateTimeKind.Utc).AddTicks(9314), 64, 72, 2 },
                    { new DateTime(2023, 6, 16, 0, 9, 8, 634, DateTimeKind.Utc).AddTicks(1222), 46, 74, 10 },
                    { new DateTime(2023, 6, 16, 15, 14, 55, 38, DateTimeKind.Utc).AddTicks(5974), 59, 74, 9 },
                    { new DateTime(2023, 6, 16, 15, 11, 17, 496, DateTimeKind.Utc).AddTicks(4630), 10, 77, 7 },
                    { new DateTime(2023, 6, 16, 3, 1, 9, 382, DateTimeKind.Utc).AddTicks(2454), 12, 77, 1 },
                    { new DateTime(2023, 6, 16, 5, 6, 47, 653, DateTimeKind.Utc).AddTicks(468), 99, 77, 4 },
                    { new DateTime(2023, 6, 15, 21, 16, 45, 81, DateTimeKind.Utc).AddTicks(3014), 70, 78, 6 },
                    { new DateTime(2023, 6, 16, 4, 22, 56, 174, DateTimeKind.Utc).AddTicks(9825), 54, 79, 10 },
                    { new DateTime(2023, 6, 16, 0, 50, 3, 896, DateTimeKind.Utc).AddTicks(2403), 50, 81, 8 },
                    { new DateTime(2023, 6, 16, 10, 12, 16, 181, DateTimeKind.Utc).AddTicks(4866), 60, 82, 1 },
                    { new DateTime(2023, 6, 16, 4, 22, 12, 777, DateTimeKind.Utc).AddTicks(9384), 51, 84, 8 },
                    { new DateTime(2023, 6, 15, 17, 41, 37, 388, DateTimeKind.Utc).AddTicks(918), 16, 87, 3 },
                    { new DateTime(2023, 6, 16, 1, 5, 11, 190, DateTimeKind.Utc).AddTicks(6169), 89, 89, 8 },
                    { new DateTime(2023, 6, 16, 8, 36, 8, 410, DateTimeKind.Utc).AddTicks(4590), 37, 90, 7 },
                    { new DateTime(2023, 6, 16, 7, 44, 35, 909, DateTimeKind.Utc).AddTicks(4615), 89, 90, 10 },
                    { new DateTime(2023, 6, 16, 13, 0, 7, 146, DateTimeKind.Utc).AddTicks(2229), 25, 91, 4 },
                    { new DateTime(2023, 6, 15, 20, 4, 20, 801, DateTimeKind.Utc).AddTicks(7390), 91, 92, 8 },
                    { new DateTime(2023, 6, 15, 19, 58, 47, 134, DateTimeKind.Utc).AddTicks(2124), 25, 94, 5 },
                    { new DateTime(2023, 6, 16, 16, 12, 6, 795, DateTimeKind.Utc).AddTicks(8577), 97, 94, 4 },
                    { new DateTime(2023, 6, 15, 22, 19, 35, 185, DateTimeKind.Utc).AddTicks(2138), 57, 95, 6 },
                    { new DateTime(2023, 6, 16, 16, 28, 58, 55, DateTimeKind.Utc).AddTicks(806), 88, 96, 7 },
                    { new DateTime(2023, 6, 15, 19, 49, 48, 829, DateTimeKind.Utc).AddTicks(3926), 98, 96, 9 },
                    { new DateTime(2023, 6, 16, 0, 36, 43, 923, DateTimeKind.Utc).AddTicks(6972), 52, 98, 5 },
                    { new DateTime(2023, 6, 16, 13, 4, 23, 470, DateTimeKind.Utc).AddTicks(6911), 83, 98, 6 }
                });

            migrationBuilder.CreateIndex(
                name: "IX_Comment_GameId",
                table: "Comment",
                column: "GameId");

            migrationBuilder.CreateIndex(
                name: "IX_Comment_UserId",
                table: "Comment",
                column: "UserId");

            migrationBuilder.CreateIndex(
                name: "IX_Game_CategoryId",
                table: "Game",
                column: "CategoryId");

            migrationBuilder.CreateIndex(
                name: "IX_Rating_GameId",
                table: "Rating",
                column: "GameId");

            migrationBuilder.CreateIndex(
                name: "IX_Rating_UserId",
                table: "Rating",
                column: "UserId");

            migrationBuilder.CreateIndex(
                name: "IX_UserGame_GameId",
                table: "UserGame",
                column: "GameId");
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropTable(
                name: "Comment");

            migrationBuilder.DropTable(
                name: "Rating");

            migrationBuilder.DropTable(
                name: "UserGame");

            migrationBuilder.DropTable(
                name: "Game");

            migrationBuilder.DropTable(
                name: "User");

            migrationBuilder.DropTable(
                name: "Category");
        }
    }
}
