using System;
using Microsoft.EntityFrameworkCore.Migrations;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

#pragma warning disable CA1814 // Prefer jagged arrays over multidimensional

namespace ZuydSpeelt.Migrations
{
    /// <inheritdoc />
    public partial class seeding : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.CreateTable(
                name: "Category",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    Name = table.Column<string>(type: "text", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Category", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "User",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    Username = table.Column<string>(type: "text", nullable: false),
                    Password = table.Column<string>(type: "text", nullable: false),
                    Email = table.Column<string>(type: "text", nullable: false),
                    CreatedAt = table.Column<DateTime>(type: "timestamp with time zone", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_User", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "Game",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    Title = table.Column<string>(type: "text", nullable: false),
                    CreatedAt = table.Column<DateTime>(type: "timestamp with time zone", nullable: false),
                    Popularity = table.Column<int>(type: "integer", nullable: false),
                    CategoryId = table.Column<int>(type: "integer", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Game", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Game_Category_CategoryId",
                        column: x => x.CategoryId,
                        principalTable: "Category",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "Comment",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    UserId = table.Column<int>(type: "integer", nullable: false),
                    GameId = table.Column<int>(type: "integer", nullable: false),
                    Text = table.Column<string>(type: "text", nullable: false),
                    CreatedAt = table.Column<DateTime>(type: "timestamp with time zone", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Comment", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Comment_Game_GameId",
                        column: x => x.GameId,
                        principalTable: "Game",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_Comment_User_UserId",
                        column: x => x.UserId,
                        principalTable: "User",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "Rating",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    UserId = table.Column<int>(type: "integer", nullable: false),
                    GameId = table.Column<int>(type: "integer", nullable: false),
                    Value = table.Column<int>(type: "integer", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Rating", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Rating_Game_GameId",
                        column: x => x.GameId,
                        principalTable: "Game",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_Rating_User_UserId",
                        column: x => x.UserId,
                        principalTable: "User",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "UserGame",
                columns: table => new
                {
                    UserId = table.Column<int>(type: "integer", nullable: false),
                    GameId = table.Column<int>(type: "integer", nullable: false),
                    CreatedAt = table.Column<DateTime>(type: "timestamp with time zone", nullable: false),
                    Score = table.Column<int>(type: "integer", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_UserGame", x => new { x.UserId, x.GameId, x.CreatedAt });
                    table.ForeignKey(
                        name: "FK_UserGame_Game_GameId",
                        column: x => x.GameId,
                        principalTable: "Game",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_UserGame_User_UserId",
                        column: x => x.UserId,
                        principalTable: "User",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.InsertData(
                table: "Category",
                columns: new[] { "Id", "Name" },
                values: new object[,]
                {
                    { 1, "compress" },
                    { 2, "bypass" },
                    { 3, "override" },
                    { 4, "calculate" },
                    { 5, "override" },
                    { 6, "reboot" },
                    { 7, "synthesize" },
                    { 8, "parse" },
                    { 9, "navigate" },
                    { 10, "hack" },
                    { 11, "quantify" },
                    { 12, "navigate" },
                    { 13, "hack" },
                    { 14, "back up" },
                    { 15, "copy" },
                    { 16, "copy" },
                    { 17, "index" },
                    { 18, "quantify" },
                    { 19, "program" },
                    { 20, "compress" },
                    { 21, "index" },
                    { 22, "index" },
                    { 23, "connect" },
                    { 24, "override" },
                    { 25, "program" },
                    { 26, "calculate" },
                    { 27, "synthesize" },
                    { 28, "program" },
                    { 29, "generate" },
                    { 30, "navigate" },
                    { 31, "hack" },
                    { 32, "back up" },
                    { 33, "parse" },
                    { 34, "navigate" },
                    { 35, "copy" },
                    { 36, "quantify" },
                    { 37, "copy" },
                    { 38, "hack" },
                    { 39, "compress" },
                    { 40, "copy" },
                    { 41, "compress" },
                    { 42, "back up" },
                    { 43, "override" },
                    { 44, "index" },
                    { 45, "parse" },
                    { 46, "navigate" },
                    { 47, "parse" },
                    { 48, "hack" },
                    { 49, "parse" },
                    { 50, "connect" },
                    { 51, "synthesize" },
                    { 52, "calculate" },
                    { 53, "calculate" },
                    { 54, "generate" },
                    { 55, "reboot" },
                    { 56, "calculate" },
                    { 57, "override" },
                    { 58, "index" },
                    { 59, "input" },
                    { 60, "synthesize" },
                    { 61, "program" },
                    { 62, "override" },
                    { 63, "override" },
                    { 64, "synthesize" },
                    { 65, "connect" },
                    { 66, "program" },
                    { 67, "compress" },
                    { 68, "copy" },
                    { 69, "index" },
                    { 70, "override" },
                    { 71, "calculate" },
                    { 72, "program" },
                    { 73, "compress" },
                    { 74, "bypass" },
                    { 75, "input" },
                    { 76, "override" },
                    { 77, "bypass" },
                    { 78, "quantify" },
                    { 79, "reboot" },
                    { 80, "back up" },
                    { 81, "quantify" },
                    { 82, "connect" },
                    { 83, "generate" },
                    { 84, "parse" },
                    { 85, "reboot" },
                    { 86, "input" },
                    { 87, "transmit" },
                    { 88, "reboot" },
                    { 89, "quantify" },
                    { 90, "copy" },
                    { 91, "generate" },
                    { 92, "navigate" },
                    { 93, "reboot" },
                    { 94, "calculate" },
                    { 95, "program" },
                    { 96, "quantify" },
                    { 97, "reboot" },
                    { 98, "calculate" },
                    { 99, "transmit" },
                    { 100, "synthesize" }
                });

            migrationBuilder.InsertData(
                table: "User",
                columns: new[] { "Id", "CreatedAt", "Email", "Password", "Username" },
                values: new object[,]
                {
                    { 1, new DateTime(2023, 6, 9, 0, 30, 54, 13, DateTimeKind.Utc).AddTicks(9191), "Carleton.Feeney@yahoo.com", "navigate", "Camron" },
                    { 2, new DateTime(2023, 6, 8, 20, 12, 52, 360, DateTimeKind.Utc).AddTicks(9064), "Judah45@hotmail.com", "override", "Zechariah" },
                    { 3, new DateTime(2023, 6, 8, 13, 32, 45, 344, DateTimeKind.Utc).AddTicks(8480), "Gerry.Wuckert@gmail.com", "parse", "Jonatan" },
                    { 4, new DateTime(2023, 6, 9, 8, 29, 15, 631, DateTimeKind.Utc).AddTicks(8027), "Ole_Fisher@hotmail.com", "copy", "Hank" },
                    { 5, new DateTime(2023, 6, 9, 0, 22, 1, 294, DateTimeKind.Utc).AddTicks(4928), "Alicia48@hotmail.com", "reboot", "Ewald" },
                    { 6, new DateTime(2023, 6, 8, 13, 13, 0, 309, DateTimeKind.Utc).AddTicks(7554), "Moses_Hammes41@hotmail.com", "program", "Jerad" },
                    { 7, new DateTime(2023, 6, 9, 4, 45, 39, 608, DateTimeKind.Utc).AddTicks(3743), "Alverta_Wisoky@yahoo.com", "copy", "Eveline" },
                    { 8, new DateTime(2023, 6, 8, 11, 56, 10, 218, DateTimeKind.Utc).AddTicks(6629), "Murl.Jacobs78@gmail.com", "override", "Hassie" },
                    { 9, new DateTime(2023, 6, 8, 14, 14, 23, 888, DateTimeKind.Utc).AddTicks(9025), "Haley15@hotmail.com", "connect", "Annabel" },
                    { 10, new DateTime(2023, 6, 8, 15, 23, 28, 809, DateTimeKind.Utc).AddTicks(6404), "Ed.Balistreri96@yahoo.com", "parse", "Houston" },
                    { 11, new DateTime(2023, 6, 9, 1, 52, 12, 523, DateTimeKind.Utc).AddTicks(7007), "Mabel.Larson65@hotmail.com", "synthesize", "Janessa" },
                    { 12, new DateTime(2023, 6, 9, 2, 29, 24, 770, DateTimeKind.Utc).AddTicks(4741), "Logan_Swaniawski49@gmail.com", "calculate", "America" },
                    { 13, new DateTime(2023, 6, 9, 8, 36, 9, 922, DateTimeKind.Utc).AddTicks(2511), "Casper.Kohler@hotmail.com", "program", "Suzanne" },
                    { 14, new DateTime(2023, 6, 9, 5, 16, 40, 545, DateTimeKind.Utc).AddTicks(8699), "Braxton_Hansen@gmail.com", "generate", "Amy" },
                    { 15, new DateTime(2023, 6, 9, 3, 42, 43, 757, DateTimeKind.Utc).AddTicks(5198), "Javon79@gmail.com", "generate", "Yazmin" },
                    { 16, new DateTime(2023, 6, 9, 3, 1, 54, 806, DateTimeKind.Utc).AddTicks(3828), "Maya11@gmail.com", "connect", "Tyshawn" },
                    { 17, new DateTime(2023, 6, 9, 6, 6, 6, 271, DateTimeKind.Utc).AddTicks(4323), "Rickey19@yahoo.com", "hack", "Brannon" },
                    { 18, new DateTime(2023, 6, 8, 18, 30, 17, 552, DateTimeKind.Utc).AddTicks(8361), "Vella_Mraz22@yahoo.com", "quantify", "Eddie" },
                    { 19, new DateTime(2023, 6, 9, 8, 15, 36, 877, DateTimeKind.Utc).AddTicks(5932), "Dominique_Yost90@hotmail.com", "hack", "Marc" },
                    { 20, new DateTime(2023, 6, 8, 14, 39, 40, 235, DateTimeKind.Utc).AddTicks(2971), "Curt.Torphy@hotmail.com", "calculate", "Eugene" },
                    { 21, new DateTime(2023, 6, 8, 9, 44, 41, 550, DateTimeKind.Utc).AddTicks(303), "Augusta.Deckow@gmail.com", "input", "Chet" },
                    { 22, new DateTime(2023, 6, 8, 18, 30, 37, 728, DateTimeKind.Utc).AddTicks(2158), "Crawford_Hane@gmail.com", "parse", "Pierce" },
                    { 23, new DateTime(2023, 6, 8, 23, 11, 20, 483, DateTimeKind.Utc).AddTicks(6888), "Isaias.Sipes@yahoo.com", "copy", "Dale" },
                    { 24, new DateTime(2023, 6, 8, 20, 33, 57, 383, DateTimeKind.Utc).AddTicks(1602), "Doug_Heaney@yahoo.com", "override", "Blanche" },
                    { 25, new DateTime(2023, 6, 9, 0, 1, 57, 427, DateTimeKind.Utc).AddTicks(3146), "Graciela.McClure11@gmail.com", "copy", "Loyal" },
                    { 26, new DateTime(2023, 6, 8, 18, 20, 57, 247, DateTimeKind.Utc).AddTicks(1609), "Benny_Christiansen@hotmail.com", "quantify", "Gladyce" },
                    { 27, new DateTime(2023, 6, 8, 23, 22, 50, 314, DateTimeKind.Utc).AddTicks(4987), "Leora_Berge52@yahoo.com", "program", "Aisha" },
                    { 28, new DateTime(2023, 6, 9, 0, 26, 22, 865, DateTimeKind.Utc).AddTicks(2893), "Mohammad.Gerhold16@yahoo.com", "compress", "Margarett" },
                    { 29, new DateTime(2023, 6, 9, 0, 32, 29, 464, DateTimeKind.Utc).AddTicks(2644), "Marvin54@hotmail.com", "calculate", "Drake" },
                    { 30, new DateTime(2023, 6, 9, 7, 34, 20, 671, DateTimeKind.Utc).AddTicks(7116), "Andres.Larson@yahoo.com", "index", "Isai" },
                    { 31, new DateTime(2023, 6, 9, 2, 22, 23, 461, DateTimeKind.Utc).AddTicks(109), "Icie_Price48@gmail.com", "generate", "Dewitt" },
                    { 32, new DateTime(2023, 6, 8, 18, 41, 8, 754, DateTimeKind.Utc).AddTicks(6127), "Arvel.Kutch@hotmail.com", "compress", "Jaron" },
                    { 33, new DateTime(2023, 6, 9, 8, 10, 56, 22, DateTimeKind.Utc).AddTicks(3401), "Eudora_Larson@hotmail.com", "index", "Ivy" },
                    { 34, new DateTime(2023, 6, 9, 0, 37, 50, 360, DateTimeKind.Utc).AddTicks(4208), "Mariam.Kertzmann@yahoo.com", "calculate", "Lonzo" },
                    { 35, new DateTime(2023, 6, 9, 7, 45, 6, 948, DateTimeKind.Utc).AddTicks(1129), "Harold.Jones19@hotmail.com", "reboot", "Austin" },
                    { 36, new DateTime(2023, 6, 8, 19, 45, 16, 581, DateTimeKind.Utc).AddTicks(1433), "Peggie.Stanton@gmail.com", "navigate", "Katelyn" },
                    { 37, new DateTime(2023, 6, 9, 1, 27, 37, 44, DateTimeKind.Utc).AddTicks(331), "Jackie.OConnell54@yahoo.com", "generate", "Hubert" },
                    { 38, new DateTime(2023, 6, 8, 11, 32, 25, 140, DateTimeKind.Utc).AddTicks(2066), "Pink37@hotmail.com", "input", "Nella" },
                    { 39, new DateTime(2023, 6, 8, 23, 58, 26, 240, DateTimeKind.Utc).AddTicks(530), "Maybelle_Larkin50@hotmail.com", "override", "Joseph" },
                    { 40, new DateTime(2023, 6, 9, 2, 32, 24, 623, DateTimeKind.Utc).AddTicks(7336), "Kathryne_Raynor28@gmail.com", "index", "Brady" },
                    { 41, new DateTime(2023, 6, 8, 13, 14, 16, 663, DateTimeKind.Utc).AddTicks(8762), "Dakota_Hyatt27@gmail.com", "copy", "Amya" },
                    { 42, new DateTime(2023, 6, 9, 0, 57, 10, 340, DateTimeKind.Utc).AddTicks(6235), "Fred_Kuvalis@yahoo.com", "generate", "Mortimer" },
                    { 43, new DateTime(2023, 6, 8, 19, 2, 9, 261, DateTimeKind.Utc).AddTicks(4913), "Corrine.Gerlach47@yahoo.com", "input", "Maymie" },
                    { 44, new DateTime(2023, 6, 8, 14, 14, 34, 478, DateTimeKind.Utc).AddTicks(9480), "Filiberto.Flatley14@hotmail.com", "connect", "Vivien" },
                    { 45, new DateTime(2023, 6, 9, 0, 49, 14, 260, DateTimeKind.Utc).AddTicks(1206), "Issac.Armstrong2@gmail.com", "parse", "Wyatt" },
                    { 46, new DateTime(2023, 6, 9, 5, 27, 59, 496, DateTimeKind.Utc).AddTicks(8193), "Alessandro76@hotmail.com", "input", "Urban" },
                    { 47, new DateTime(2023, 6, 8, 18, 37, 37, 843, DateTimeKind.Utc).AddTicks(7844), "Alan_Connelly@yahoo.com", "connect", "Otho" },
                    { 48, new DateTime(2023, 6, 8, 14, 5, 31, 371, DateTimeKind.Utc).AddTicks(2146), "Madalyn77@yahoo.com", "quantify", "Roosevelt" },
                    { 49, new DateTime(2023, 6, 8, 11, 4, 56, 551, DateTimeKind.Utc).AddTicks(4921), "Brad.Bernier56@yahoo.com", "parse", "Kaitlyn" },
                    { 50, new DateTime(2023, 6, 8, 9, 2, 32, 94, DateTimeKind.Utc).AddTicks(9986), "Arlene29@hotmail.com", "copy", "Vanessa" },
                    { 51, new DateTime(2023, 6, 8, 23, 8, 47, 241, DateTimeKind.Utc).AddTicks(4919), "Lois_Marks@yahoo.com", "synthesize", "Ezra" },
                    { 52, new DateTime(2023, 6, 8, 23, 12, 54, 560, DateTimeKind.Utc).AddTicks(3189), "Jaren_Swift65@hotmail.com", "index", "Maryse" },
                    { 53, new DateTime(2023, 6, 8, 22, 23, 30, 316, DateTimeKind.Utc).AddTicks(2343), "Retha50@gmail.com", "back up", "Morris" },
                    { 54, new DateTime(2023, 6, 9, 3, 54, 44, 194, DateTimeKind.Utc).AddTicks(6982), "Nasir_Bartoletti@yahoo.com", "input", "Kadin" },
                    { 55, new DateTime(2023, 6, 9, 0, 55, 39, 30, DateTimeKind.Utc).AddTicks(8382), "Jett.Champlin@yahoo.com", "generate", "Virgil" },
                    { 56, new DateTime(2023, 6, 8, 17, 8, 12, 362, DateTimeKind.Utc).AddTicks(6764), "Jada63@yahoo.com", "program", "Khalil" },
                    { 57, new DateTime(2023, 6, 8, 17, 46, 42, 319, DateTimeKind.Utc).AddTicks(8024), "Wilburn_Beatty@gmail.com", "index", "Brittany" },
                    { 58, new DateTime(2023, 6, 8, 16, 8, 16, 390, DateTimeKind.Utc).AddTicks(1495), "Ignacio_Hodkiewicz44@yahoo.com", "reboot", "Sigmund" },
                    { 59, new DateTime(2023, 6, 8, 16, 47, 1, 152, DateTimeKind.Utc).AddTicks(8221), "Mekhi_Braun10@yahoo.com", "generate", "Evie" },
                    { 60, new DateTime(2023, 6, 8, 11, 54, 51, 954, DateTimeKind.Utc).AddTicks(891), "Ulices.Roob3@hotmail.com", "hack", "Roma" },
                    { 61, new DateTime(2023, 6, 8, 12, 59, 59, 338, DateTimeKind.Utc).AddTicks(8919), "Malvina.Brown@yahoo.com", "generate", "Neal" },
                    { 62, new DateTime(2023, 6, 8, 17, 7, 19, 774, DateTimeKind.Utc).AddTicks(7120), "Natalie_Cummerata@gmail.com", "override", "River" },
                    { 63, new DateTime(2023, 6, 8, 20, 5, 46, 929, DateTimeKind.Utc).AddTicks(7730), "Samir30@gmail.com", "program", "Daryl" },
                    { 64, new DateTime(2023, 6, 9, 0, 40, 54, 868, DateTimeKind.Utc).AddTicks(7125), "Adam_Yost@gmail.com", "synthesize", "Alejandrin" },
                    { 65, new DateTime(2023, 6, 9, 8, 19, 36, 661, DateTimeKind.Utc).AddTicks(5175), "Afton54@gmail.com", "hack", "Alessandro" },
                    { 66, new DateTime(2023, 6, 8, 14, 48, 23, 358, DateTimeKind.Utc).AddTicks(1266), "Ernestina91@hotmail.com", "calculate", "Nathanial" },
                    { 67, new DateTime(2023, 6, 8, 15, 32, 31, 126, DateTimeKind.Utc).AddTicks(4925), "Rogers.Lynch77@yahoo.com", "navigate", "Tre" },
                    { 68, new DateTime(2023, 6, 9, 7, 50, 30, 241, DateTimeKind.Utc).AddTicks(3925), "Jeramie.Moore@yahoo.com", "copy", "Tabitha" },
                    { 69, new DateTime(2023, 6, 8, 20, 8, 31, 887, DateTimeKind.Utc).AddTicks(4228), "Yasmeen_Bode@hotmail.com", "navigate", "Tod" },
                    { 70, new DateTime(2023, 6, 8, 16, 42, 20, 958, DateTimeKind.Utc).AddTicks(4975), "Kameron_Ratke@gmail.com", "calculate", "Mireya" },
                    { 71, new DateTime(2023, 6, 9, 5, 47, 55, 800, DateTimeKind.Utc).AddTicks(6959), "Deshaun9@yahoo.com", "hack", "Layne" },
                    { 72, new DateTime(2023, 6, 9, 6, 50, 12, 951, DateTimeKind.Utc).AddTicks(7863), "Kyra.Rempel@hotmail.com", "input", "Rasheed" },
                    { 73, new DateTime(2023, 6, 8, 13, 50, 40, 942, DateTimeKind.Utc).AddTicks(3123), "Madge41@gmail.com", "bypass", "Esperanza" },
                    { 74, new DateTime(2023, 6, 8, 16, 37, 22, 760, DateTimeKind.Utc).AddTicks(122), "Flavio74@gmail.com", "index", "Dale" },
                    { 75, new DateTime(2023, 6, 9, 5, 30, 50, 38, DateTimeKind.Utc).AddTicks(7643), "Cale97@yahoo.com", "transmit", "Clovis" },
                    { 76, new DateTime(2023, 6, 9, 5, 30, 23, 130, DateTimeKind.Utc).AddTicks(5098), "Lisandro.Dooley@gmail.com", "index", "Muhammad" },
                    { 77, new DateTime(2023, 6, 8, 17, 19, 6, 681, DateTimeKind.Utc).AddTicks(2399), "Molly.Herman58@hotmail.com", "back up", "Janice" },
                    { 78, new DateTime(2023, 6, 8, 8, 53, 42, 509, DateTimeKind.Utc).AddTicks(4679), "Alta.Wehner@yahoo.com", "copy", "Marquise" },
                    { 79, new DateTime(2023, 6, 9, 7, 26, 21, 464, DateTimeKind.Utc).AddTicks(7155), "Kelsie.Lockman@gmail.com", "navigate", "Sheldon" },
                    { 80, new DateTime(2023, 6, 8, 15, 17, 23, 267, DateTimeKind.Utc).AddTicks(1914), "Lexi_Hammes50@gmail.com", "reboot", "Rowan" },
                    { 81, new DateTime(2023, 6, 9, 3, 44, 19, 742, DateTimeKind.Utc).AddTicks(5043), "Helmer72@yahoo.com", "bypass", "Adrien" },
                    { 82, new DateTime(2023, 6, 8, 9, 59, 25, 164, DateTimeKind.Utc).AddTicks(431), "Dallin.Nader@hotmail.com", "back up", "Lonny" },
                    { 83, new DateTime(2023, 6, 8, 18, 12, 7, 585, DateTimeKind.Utc).AddTicks(6676), "Annette.Koepp23@hotmail.com", "program", "Magdalena" },
                    { 84, new DateTime(2023, 6, 9, 4, 36, 15, 790, DateTimeKind.Utc).AddTicks(1324), "Una.Nader39@gmail.com", "transmit", "Ebony" },
                    { 85, new DateTime(2023, 6, 8, 12, 57, 52, 474, DateTimeKind.Utc).AddTicks(3213), "Malinda.Yundt@yahoo.com", "transmit", "Maddison" },
                    { 86, new DateTime(2023, 6, 8, 23, 50, 52, 16, DateTimeKind.Utc).AddTicks(5376), "Nayeli_Leuschke@gmail.com", "override", "Donna" },
                    { 87, new DateTime(2023, 6, 8, 14, 28, 49, 869, DateTimeKind.Utc).AddTicks(7871), "Keara60@yahoo.com", "index", "Dortha" },
                    { 88, new DateTime(2023, 6, 8, 8, 53, 51, 140, DateTimeKind.Utc).AddTicks(6242), "Bertram_Schuppe38@hotmail.com", "transmit", "Karine" },
                    { 89, new DateTime(2023, 6, 8, 14, 52, 15, 54, DateTimeKind.Utc).AddTicks(7085), "Yoshiko_OKeefe@hotmail.com", "generate", "Corine" },
                    { 90, new DateTime(2023, 6, 9, 6, 4, 25, 788, DateTimeKind.Utc).AddTicks(5025), "Marilyne.Powlowski86@gmail.com", "connect", "Noelia" },
                    { 91, new DateTime(2023, 6, 8, 18, 1, 53, 512, DateTimeKind.Utc).AddTicks(232), "Rosetta.Russel68@gmail.com", "connect", "Neil" },
                    { 92, new DateTime(2023, 6, 8, 10, 14, 0, 100, DateTimeKind.Utc).AddTicks(7995), "Emory48@hotmail.com", "calculate", "Felipa" },
                    { 93, new DateTime(2023, 6, 8, 11, 34, 41, 882, DateTimeKind.Utc).AddTicks(5391), "Claudia_Baumbach@gmail.com", "parse", "Caleb" },
                    { 94, new DateTime(2023, 6, 8, 9, 32, 18, 620, DateTimeKind.Utc).AddTicks(7290), "Osvaldo_Marvin@yahoo.com", "parse", "Tyrique" },
                    { 95, new DateTime(2023, 6, 8, 8, 59, 56, 967, DateTimeKind.Utc).AddTicks(4224), "Cortney.Crona98@gmail.com", "hack", "Paige" },
                    { 96, new DateTime(2023, 6, 9, 2, 23, 49, 916, DateTimeKind.Utc).AddTicks(9482), "Magnolia_Wisoky8@gmail.com", "compress", "Loyal" },
                    { 97, new DateTime(2023, 6, 8, 9, 49, 2, 225, DateTimeKind.Utc).AddTicks(4413), "Aric_Klein91@yahoo.com", "back up", "Isai" },
                    { 98, new DateTime(2023, 6, 8, 22, 23, 27, 840, DateTimeKind.Utc).AddTicks(8658), "Alexandrine.Hermiston@yahoo.com", "reboot", "Alysson" },
                    { 99, new DateTime(2023, 6, 8, 13, 28, 54, 152, DateTimeKind.Utc).AddTicks(6389), "Charlie15@gmail.com", "reboot", "Jaida" },
                    { 100, new DateTime(2023, 6, 8, 14, 40, 23, 224, DateTimeKind.Utc).AddTicks(4185), "Domenico.Turcotte84@gmail.com", "reboot", "Ana" }
                });

            migrationBuilder.InsertData(
                table: "Game",
                columns: new[] { "Id", "CategoryId", "CreatedAt", "Popularity", "Title" },
                values: new object[,]
                {
                    { 1, 14, new DateTime(2023, 6, 9, 1, 47, 29, 991, DateTimeKind.Utc).AddTicks(3547), 46, "I'll transmit the back-end EXE panel, that should panel the EXE panel!" },
                    { 2, 93, new DateTime(2023, 6, 8, 11, 23, 15, 957, DateTimeKind.Utc).AddTicks(7379), 23, "The PNG card is down, parse the open-source card so we can parse the PNG card!" },
                    { 3, 94, new DateTime(2023, 6, 8, 19, 0, 26, 316, DateTimeKind.Utc).AddTicks(588), 47, "The PNG alarm is down, program the haptic alarm so we can program the PNG alarm!" },
                    { 4, 90, new DateTime(2023, 6, 9, 1, 52, 7, 427, DateTimeKind.Utc).AddTicks(5873), 56, "Try to transmit the XML capacitor, maybe it will transmit the 1080p capacitor!" },
                    { 5, 32, new DateTime(2023, 6, 8, 18, 45, 43, 807, DateTimeKind.Utc).AddTicks(9009), 63, "The SCSI capacitor is down, parse the auxiliary capacitor so we can parse the SCSI capacitor!" },
                    { 6, 3, new DateTime(2023, 6, 8, 16, 33, 53, 174, DateTimeKind.Utc).AddTicks(1847), 58, "I'll index the digital SMTP protocol, that should protocol the SMTP protocol!" },
                    { 7, 58, new DateTime(2023, 6, 9, 3, 27, 38, 604, DateTimeKind.Utc).AddTicks(4774), 88, "backing up the application won't do anything, we need to override the back-end RSS application!" },
                    { 8, 28, new DateTime(2023, 6, 8, 16, 22, 34, 219, DateTimeKind.Utc).AddTicks(8806), 92, "If we input the circuit, we can get to the SMS circuit through the wireless SMS circuit!" },
                    { 9, 2, new DateTime(2023, 6, 8, 21, 55, 18, 653, DateTimeKind.Utc).AddTicks(5328), 28, "We need to index the optical AI transmitter!" },
                    { 10, 47, new DateTime(2023, 6, 8, 14, 56, 5, 323, DateTimeKind.Utc).AddTicks(2980), 8, "We need to navigate the solid state SAS hard drive!" },
                    { 11, 87, new DateTime(2023, 6, 9, 8, 33, 18, 183, DateTimeKind.Utc).AddTicks(6493), 69, "You can't back up the circuit without overriding the primary SMS circuit!" },
                    { 12, 15, new DateTime(2023, 6, 9, 5, 11, 27, 669, DateTimeKind.Utc).AddTicks(9011), 46, "compressing the card won't do anything, we need to program the auxiliary FTP card!" },
                    { 13, 65, new DateTime(2023, 6, 9, 4, 35, 59, 136, DateTimeKind.Utc).AddTicks(613), 96, "I'll quantify the solid state AGP monitor, that should monitor the AGP monitor!" },
                    { 14, 6, new DateTime(2023, 6, 8, 20, 51, 43, 793, DateTimeKind.Utc).AddTicks(7021), 51, "We need to quantify the primary SQL matrix!" },
                    { 15, 30, new DateTime(2023, 6, 8, 8, 51, 59, 861, DateTimeKind.Utc).AddTicks(5735), 89, "We need to input the wireless THX matrix!" },
                    { 16, 78, new DateTime(2023, 6, 9, 5, 13, 18, 74, DateTimeKind.Utc).AddTicks(3756), 3, "You can't generate the system without overriding the redundant SMS system!" },
                    { 17, 72, new DateTime(2023, 6, 8, 13, 1, 33, 959, DateTimeKind.Utc).AddTicks(4877), 58, "We need to reboot the optical SCSI transmitter!" },
                    { 18, 75, new DateTime(2023, 6, 9, 7, 57, 20, 157, DateTimeKind.Utc).AddTicks(7690), 79, "If we quantify the firewall, we can get to the COM firewall through the mobile COM firewall!" },
                    { 19, 63, new DateTime(2023, 6, 8, 11, 1, 14, 277, DateTimeKind.Utc).AddTicks(2654), 5, "Use the 1080p JSON protocol, then you can generate the 1080p protocol!" },
                    { 20, 20, new DateTime(2023, 6, 8, 13, 32, 1, 36, DateTimeKind.Utc).AddTicks(7776), 85, "transmitting the card won't do anything, we need to compress the mobile HTTP card!" },
                    { 21, 15, new DateTime(2023, 6, 8, 16, 47, 12, 333, DateTimeKind.Utc).AddTicks(2653), 51, "We need to program the online PNG program!" },
                    { 22, 17, new DateTime(2023, 6, 8, 16, 32, 8, 671, DateTimeKind.Utc).AddTicks(9370), 66, "Use the cross-platform SQL driver, then you can bypass the cross-platform driver!" },
                    { 23, 34, new DateTime(2023, 6, 9, 4, 27, 4, 576, DateTimeKind.Utc).AddTicks(2866), 19, "You can't quantify the monitor without compressing the 1080p PNG monitor!" },
                    { 24, 93, new DateTime(2023, 6, 9, 2, 51, 19, 922, DateTimeKind.Utc).AddTicks(8460), 19, "backing up the bus won't do anything, we need to compress the auxiliary GB bus!" },
                    { 25, 21, new DateTime(2023, 6, 8, 14, 53, 25, 988, DateTimeKind.Utc).AddTicks(9889), 60, "I'll hack the digital RSS capacitor, that should capacitor the RSS capacitor!" },
                    { 26, 60, new DateTime(2023, 6, 8, 17, 27, 38, 671, DateTimeKind.Utc).AddTicks(3257), 65, "I'll connect the mobile SAS alarm, that should alarm the SAS alarm!" },
                    { 27, 88, new DateTime(2023, 6, 8, 18, 41, 6, 660, DateTimeKind.Utc).AddTicks(890), 9, "Try to connect the SDD panel, maybe it will connect the neural panel!" },
                    { 28, 61, new DateTime(2023, 6, 8, 15, 9, 37, 828, DateTimeKind.Utc).AddTicks(7970), 76, "I'll navigate the haptic IB card, that should card the IB card!" },
                    { 29, 54, new DateTime(2023, 6, 9, 6, 6, 52, 635, DateTimeKind.Utc).AddTicks(733), 61, "If we input the alarm, we can get to the PNG alarm through the open-source PNG alarm!" },
                    { 30, 97, new DateTime(2023, 6, 9, 6, 27, 48, 21, DateTimeKind.Utc).AddTicks(3331), 42, "Use the wireless SQL port, then you can index the wireless port!" },
                    { 31, 72, new DateTime(2023, 6, 9, 1, 39, 20, 406, DateTimeKind.Utc).AddTicks(9990), 98, "If we override the application, we can get to the CSS application through the bluetooth CSS application!" },
                    { 32, 72, new DateTime(2023, 6, 8, 13, 55, 56, 297, DateTimeKind.Utc).AddTicks(5308), 24, "Try to input the AGP microchip, maybe it will input the wireless microchip!" },
                    { 33, 74, new DateTime(2023, 6, 8, 12, 51, 37, 832, DateTimeKind.Utc).AddTicks(247), 8, "We need to input the virtual AI firewall!" },
                    { 34, 37, new DateTime(2023, 6, 8, 13, 9, 46, 325, DateTimeKind.Utc).AddTicks(6986), 76, "The RSS program is down, program the haptic program so we can program the RSS program!" },
                    { 35, 16, new DateTime(2023, 6, 9, 8, 16, 1, 848, DateTimeKind.Utc).AddTicks(5177), 36, "Use the bluetooth CSS bus, then you can transmit the bluetooth bus!" },
                    { 36, 18, new DateTime(2023, 6, 8, 19, 13, 50, 259, DateTimeKind.Utc).AddTicks(151), 32, "Use the mobile THX hard drive, then you can program the mobile hard drive!" },
                    { 37, 40, new DateTime(2023, 6, 8, 15, 46, 33, 245, DateTimeKind.Utc).AddTicks(9840), 21, "The AGP hard drive is down, synthesize the online hard drive so we can synthesize the AGP hard drive!" },
                    { 38, 41, new DateTime(2023, 6, 9, 5, 45, 48, 984, DateTimeKind.Utc).AddTicks(2722), 69, "Use the wireless XML bus, then you can index the wireless bus!" },
                    { 39, 89, new DateTime(2023, 6, 9, 1, 39, 34, 568, DateTimeKind.Utc).AddTicks(3171), 92, "I'll generate the haptic GB program, that should program the GB program!" },
                    { 40, 3, new DateTime(2023, 6, 8, 22, 41, 31, 864, DateTimeKind.Utc).AddTicks(3306), 13, "Use the virtual SQL matrix, then you can connect the virtual matrix!" },
                    { 41, 9, new DateTime(2023, 6, 8, 18, 57, 41, 401, DateTimeKind.Utc).AddTicks(7706), 64, "Try to copy the EXE matrix, maybe it will copy the wireless matrix!" },
                    { 42, 95, new DateTime(2023, 6, 9, 3, 35, 51, 848, DateTimeKind.Utc).AddTicks(5908), 51, "I'll override the back-end EXE driver, that should driver the EXE driver!" },
                    { 43, 91, new DateTime(2023, 6, 9, 6, 0, 3, 10, DateTimeKind.Utc).AddTicks(4728), 76, "Use the primary SQL transmitter, then you can index the primary transmitter!" },
                    { 44, 24, new DateTime(2023, 6, 9, 6, 53, 58, 582, DateTimeKind.Utc).AddTicks(3560), 17, "I'll navigate the open-source TCP sensor, that should sensor the TCP sensor!" },
                    { 45, 68, new DateTime(2023, 6, 9, 6, 24, 4, 502, DateTimeKind.Utc).AddTicks(2351), 38, "Use the primary AI interface, then you can input the primary interface!" },
                    { 46, 73, new DateTime(2023, 6, 8, 14, 51, 46, 491, DateTimeKind.Utc).AddTicks(1417), 82, "indexing the monitor won't do anything, we need to calculate the digital XML monitor!" },
                    { 47, 23, new DateTime(2023, 6, 8, 15, 54, 13, 105, DateTimeKind.Utc).AddTicks(3420), 23, "Use the virtual FTP firewall, then you can synthesize the virtual firewall!" },
                    { 48, 51, new DateTime(2023, 6, 8, 15, 16, 41, 415, DateTimeKind.Utc).AddTicks(5150), 40, "The SMS pixel is down, quantify the 1080p pixel so we can quantify the SMS pixel!" },
                    { 49, 56, new DateTime(2023, 6, 8, 20, 57, 0, 693, DateTimeKind.Utc).AddTicks(4173), 26, "synthesizing the feed won't do anything, we need to bypass the optical SCSI feed!" },
                    { 50, 96, new DateTime(2023, 6, 8, 14, 1, 12, 441, DateTimeKind.Utc).AddTicks(9070), 66, "Use the bluetooth AGP driver, then you can generate the bluetooth driver!" },
                    { 51, 70, new DateTime(2023, 6, 9, 2, 45, 12, 785, DateTimeKind.Utc).AddTicks(148), 1, "backing up the port won't do anything, we need to compress the virtual HTTP port!" },
                    { 52, 50, new DateTime(2023, 6, 8, 15, 53, 44, 528, DateTimeKind.Utc).AddTicks(9967), 84, "You can't program the circuit without generating the virtual SMTP circuit!" },
                    { 53, 44, new DateTime(2023, 6, 9, 8, 32, 8, 86, DateTimeKind.Utc).AddTicks(7680), 88, "We need to transmit the online JSON application!" },
                    { 54, 31, new DateTime(2023, 6, 9, 2, 32, 12, 135, DateTimeKind.Utc).AddTicks(9072), 65, "The USB card is down, parse the auxiliary card so we can parse the USB card!" },
                    { 55, 92, new DateTime(2023, 6, 8, 16, 44, 7, 868, DateTimeKind.Utc).AddTicks(1210), 32, "We need to parse the open-source AGP system!" },
                    { 56, 58, new DateTime(2023, 6, 8, 15, 9, 1, 857, DateTimeKind.Utc).AddTicks(7664), 47, "Try to reboot the SMS panel, maybe it will reboot the online panel!" },
                    { 57, 87, new DateTime(2023, 6, 8, 12, 59, 47, 870, DateTimeKind.Utc).AddTicks(771), 11, "I'll compress the online SMS sensor, that should sensor the SMS sensor!" },
                    { 58, 54, new DateTime(2023, 6, 8, 23, 33, 24, 486, DateTimeKind.Utc).AddTicks(716), 72, "Try to back up the XSS circuit, maybe it will back up the virtual circuit!" },
                    { 59, 93, new DateTime(2023, 6, 8, 14, 56, 56, 300, DateTimeKind.Utc).AddTicks(1373), 70, "Use the primary XML sensor, then you can program the primary sensor!" },
                    { 60, 48, new DateTime(2023, 6, 9, 2, 20, 34, 543, DateTimeKind.Utc).AddTicks(7591), 92, "The GB program is down, generate the neural program so we can generate the GB program!" },
                    { 61, 96, new DateTime(2023, 6, 8, 16, 55, 4, 983, DateTimeKind.Utc).AddTicks(6651), 77, "You can't compress the system without calculating the cross-platform ADP system!" },
                    { 62, 13, new DateTime(2023, 6, 8, 20, 0, 39, 25, DateTimeKind.Utc).AddTicks(5374), 44, "The TCP pixel is down, back up the haptic pixel so we can back up the TCP pixel!" },
                    { 63, 28, new DateTime(2023, 6, 9, 8, 32, 50, 629, DateTimeKind.Utc).AddTicks(438), 35, "I'll connect the bluetooth HTTP alarm, that should alarm the HTTP alarm!" },
                    { 64, 63, new DateTime(2023, 6, 8, 16, 46, 12, 287, DateTimeKind.Utc).AddTicks(9155), 60, "We need to synthesize the bluetooth EXE card!" },
                    { 65, 26, new DateTime(2023, 6, 9, 5, 58, 16, 918, DateTimeKind.Utc).AddTicks(6891), 100, "quantifying the alarm won't do anything, we need to hack the neural HDD alarm!" },
                    { 66, 33, new DateTime(2023, 6, 9, 2, 57, 59, 702, DateTimeKind.Utc).AddTicks(4063), 31, "If we back up the pixel, we can get to the XML pixel through the back-end XML pixel!" },
                    { 67, 29, new DateTime(2023, 6, 9, 6, 37, 33, 748, DateTimeKind.Utc).AddTicks(5282), 23, "The THX matrix is down, override the primary matrix so we can override the THX matrix!" },
                    { 68, 70, new DateTime(2023, 6, 8, 14, 50, 55, 595, DateTimeKind.Utc).AddTicks(6173), 21, "If we copy the alarm, we can get to the PNG alarm through the mobile PNG alarm!" },
                    { 69, 50, new DateTime(2023, 6, 8, 12, 17, 34, 232, DateTimeKind.Utc).AddTicks(8427), 16, "Use the virtual RAM application, then you can program the virtual application!" },
                    { 70, 34, new DateTime(2023, 6, 8, 18, 31, 37, 845, DateTimeKind.Utc).AddTicks(8644), 12, "I'll parse the virtual FTP array, that should array the FTP array!" },
                    { 71, 35, new DateTime(2023, 6, 8, 11, 23, 43, 922, DateTimeKind.Utc).AddTicks(2410), 34, "We need to quantify the multi-byte RSS system!" },
                    { 72, 94, new DateTime(2023, 6, 8, 11, 27, 59, 13, DateTimeKind.Utc).AddTicks(5835), 53, "You can't generate the pixel without quantifying the redundant RAM pixel!" },
                    { 73, 6, new DateTime(2023, 6, 9, 7, 30, 24, 677, DateTimeKind.Utc).AddTicks(5099), 80, "The PCI application is down, parse the auxiliary application so we can parse the PCI application!" },
                    { 74, 46, new DateTime(2023, 6, 8, 17, 21, 1, 703, DateTimeKind.Utc).AddTicks(3949), 31, "bypassing the system won't do anything, we need to generate the solid state HDD system!" },
                    { 75, 76, new DateTime(2023, 6, 9, 1, 5, 8, 966, DateTimeKind.Utc).AddTicks(786), 16, "compressing the firewall won't do anything, we need to synthesize the haptic SAS firewall!" },
                    { 76, 20, new DateTime(2023, 6, 9, 4, 30, 0, 631, DateTimeKind.Utc).AddTicks(6202), 33, "You can't hack the panel without compressing the cross-platform GB panel!" },
                    { 77, 36, new DateTime(2023, 6, 8, 10, 52, 1, 1, DateTimeKind.Utc).AddTicks(9030), 12, "Try to calculate the JSON feed, maybe it will calculate the digital feed!" },
                    { 78, 33, new DateTime(2023, 6, 9, 4, 37, 45, 40, DateTimeKind.Utc).AddTicks(3369), 25, "I'll override the open-source AGP system, that should system the AGP system!" },
                    { 79, 96, new DateTime(2023, 6, 8, 18, 39, 41, 36, DateTimeKind.Utc).AddTicks(5715), 89, "I'll synthesize the neural SMS capacitor, that should capacitor the SMS capacitor!" },
                    { 80, 46, new DateTime(2023, 6, 8, 10, 54, 52, 902, DateTimeKind.Utc).AddTicks(4651), 7, "We need to copy the virtual HTTP transmitter!" },
                    { 81, 32, new DateTime(2023, 6, 8, 17, 17, 28, 604, DateTimeKind.Utc).AddTicks(1915), 22, "The PCI application is down, reboot the solid state application so we can reboot the PCI application!" },
                    { 82, 5, new DateTime(2023, 6, 8, 11, 40, 41, 293, DateTimeKind.Utc).AddTicks(7126), 33, "backing up the capacitor won't do anything, we need to synthesize the bluetooth SMS capacitor!" },
                    { 83, 74, new DateTime(2023, 6, 8, 13, 51, 10, 14, DateTimeKind.Utc).AddTicks(8999), 31, "You can't reboot the application without connecting the haptic XSS application!" },
                    { 84, 8, new DateTime(2023, 6, 8, 17, 17, 45, 549, DateTimeKind.Utc).AddTicks(5108), 82, "The CSS feed is down, navigate the 1080p feed so we can navigate the CSS feed!" },
                    { 85, 58, new DateTime(2023, 6, 9, 7, 59, 10, 876, DateTimeKind.Utc).AddTicks(7753), 96, "compressing the bandwidth won't do anything, we need to connect the wireless PNG bandwidth!" },
                    { 86, 32, new DateTime(2023, 6, 8, 9, 37, 8, 136, DateTimeKind.Utc).AddTicks(4221), 93, "quantifying the hard drive won't do anything, we need to compress the multi-byte JBOD hard drive!" },
                    { 87, 39, new DateTime(2023, 6, 8, 19, 51, 34, 722, DateTimeKind.Utc).AddTicks(2048), 7, "Try to reboot the EXE port, maybe it will reboot the optical port!" },
                    { 88, 100, new DateTime(2023, 6, 8, 12, 39, 15, 596, DateTimeKind.Utc).AddTicks(7667), 53, "Use the back-end AI program, then you can hack the back-end program!" },
                    { 89, 46, new DateTime(2023, 6, 8, 22, 59, 49, 745, DateTimeKind.Utc).AddTicks(950), 22, "If we bypass the matrix, we can get to the ADP matrix through the 1080p ADP matrix!" },
                    { 90, 80, new DateTime(2023, 6, 8, 12, 18, 29, 182, DateTimeKind.Utc).AddTicks(4263), 35, "If we generate the driver, we can get to the FTP driver through the primary FTP driver!" },
                    { 91, 10, new DateTime(2023, 6, 8, 10, 40, 7, 669, DateTimeKind.Utc).AddTicks(7339), 22, "Use the online JSON sensor, then you can copy the online sensor!" },
                    { 92, 93, new DateTime(2023, 6, 8, 17, 40, 56, 771, DateTimeKind.Utc).AddTicks(3051), 74, "Try to transmit the PNG pixel, maybe it will transmit the neural pixel!" },
                    { 93, 37, new DateTime(2023, 6, 8, 23, 31, 9, 98, DateTimeKind.Utc).AddTicks(3658), 40, "transmitting the port won't do anything, we need to navigate the multi-byte RSS port!" },
                    { 94, 19, new DateTime(2023, 6, 8, 12, 47, 34, 612, DateTimeKind.Utc).AddTicks(5540), 7, "I'll transmit the multi-byte SMS program, that should program the SMS program!" },
                    { 95, 73, new DateTime(2023, 6, 8, 22, 30, 58, 976, DateTimeKind.Utc).AddTicks(7975), 53, "The SQL transmitter is down, quantify the back-end transmitter so we can quantify the SQL transmitter!" },
                    { 96, 98, new DateTime(2023, 6, 8, 18, 17, 31, 510, DateTimeKind.Utc).AddTicks(4024), 13, "Try to input the SMS application, maybe it will input the neural application!" },
                    { 97, 38, new DateTime(2023, 6, 9, 6, 38, 56, 50, DateTimeKind.Utc).AddTicks(3711), 4, "If we generate the system, we can get to the SQL system through the haptic SQL system!" },
                    { 98, 24, new DateTime(2023, 6, 8, 21, 16, 22, 387, DateTimeKind.Utc).AddTicks(309), 73, "The CSS transmitter is down, override the cross-platform transmitter so we can override the CSS transmitter!" },
                    { 99, 30, new DateTime(2023, 6, 9, 8, 7, 24, 517, DateTimeKind.Utc).AddTicks(5806), 43, "Try to hack the XSS microchip, maybe it will hack the bluetooth microchip!" },
                    { 100, 27, new DateTime(2023, 6, 8, 22, 45, 21, 498, DateTimeKind.Utc).AddTicks(2346), 89, "I'll copy the primary XML protocol, that should protocol the XML protocol!" }
                });

            migrationBuilder.InsertData(
                table: "Comment",
                columns: new[] { "Id", "CreatedAt", "GameId", "Text", "UserId" },
                values: new object[,]
                {
                    { 1, new DateTime(2023, 6, 8, 14, 48, 3, 445, DateTimeKind.Utc).AddTicks(1052), 16, "Use the neural CSS system, then you can back up the neural system!", 75 },
                    { 2, new DateTime(2023, 6, 8, 17, 30, 56, 115, DateTimeKind.Utc).AddTicks(3018), 60, "I'll back up the solid state USB bandwidth, that should bandwidth the USB bandwidth!", 60 },
                    { 3, new DateTime(2023, 6, 9, 6, 17, 15, 398, DateTimeKind.Utc).AddTicks(6240), 58, "You can't input the program without generating the optical AGP program!", 6 },
                    { 4, new DateTime(2023, 6, 8, 17, 7, 30, 690, DateTimeKind.Utc).AddTicks(7795), 15, "Try to hack the SQL matrix, maybe it will hack the primary matrix!", 66 },
                    { 5, new DateTime(2023, 6, 8, 20, 35, 0, 618, DateTimeKind.Utc).AddTicks(8228), 76, "Try to override the XML hard drive, maybe it will override the digital hard drive!", 57 },
                    { 6, new DateTime(2023, 6, 8, 16, 50, 18, 884, DateTimeKind.Utc).AddTicks(4653), 46, "Try to parse the SDD driver, maybe it will parse the haptic driver!", 36 },
                    { 7, new DateTime(2023, 6, 8, 22, 26, 48, 80, DateTimeKind.Utc).AddTicks(373), 87, "Use the virtual AI transmitter, then you can connect the virtual transmitter!", 51 },
                    { 8, new DateTime(2023, 6, 8, 20, 51, 5, 91, DateTimeKind.Utc).AddTicks(7432), 69, "You can't index the circuit without overriding the primary CSS circuit!", 57 },
                    { 9, new DateTime(2023, 6, 9, 1, 25, 25, 675, DateTimeKind.Utc).AddTicks(7212), 90, "I'll override the wireless RAM bus, that should bus the RAM bus!", 80 },
                    { 10, new DateTime(2023, 6, 8, 10, 43, 15, 402, DateTimeKind.Utc).AddTicks(5222), 100, "You can't navigate the pixel without calculating the bluetooth PNG pixel!", 87 },
                    { 11, new DateTime(2023, 6, 9, 7, 22, 30, 139, DateTimeKind.Utc).AddTicks(6365), 46, "Use the virtual SSL card, then you can override the virtual card!", 97 },
                    { 12, new DateTime(2023, 6, 9, 0, 51, 18, 810, DateTimeKind.Utc).AddTicks(9765), 86, "I'll index the primary THX sensor, that should sensor the THX sensor!", 32 },
                    { 13, new DateTime(2023, 6, 8, 22, 27, 16, 124, DateTimeKind.Utc).AddTicks(1800), 38, "Try to generate the SAS interface, maybe it will generate the primary interface!", 37 },
                    { 14, new DateTime(2023, 6, 9, 6, 15, 50, 70, DateTimeKind.Utc).AddTicks(2435), 27, "Use the online CSS card, then you can index the online card!", 19 },
                    { 15, new DateTime(2023, 6, 8, 19, 59, 44, 881, DateTimeKind.Utc).AddTicks(2084), 43, "The SMS bus is down, transmit the multi-byte bus so we can transmit the SMS bus!", 3 },
                    { 16, new DateTime(2023, 6, 9, 5, 7, 5, 961, DateTimeKind.Utc).AddTicks(1574), 18, "We need to quantify the open-source HDD feed!", 80 },
                    { 17, new DateTime(2023, 6, 8, 9, 28, 2, 8, DateTimeKind.Utc).AddTicks(552), 5, "If we navigate the hard drive, we can get to the AI hard drive through the open-source AI hard drive!", 95 },
                    { 18, new DateTime(2023, 6, 8, 19, 36, 23, 964, DateTimeKind.Utc).AddTicks(532), 8, "If we hack the monitor, we can get to the SMS monitor through the solid state SMS monitor!", 72 },
                    { 19, new DateTime(2023, 6, 9, 0, 10, 50, 10, DateTimeKind.Utc).AddTicks(7595), 77, "If we index the matrix, we can get to the SAS matrix through the digital SAS matrix!", 37 },
                    { 20, new DateTime(2023, 6, 9, 5, 22, 34, 872, DateTimeKind.Utc).AddTicks(1497), 93, "hacking the monitor won't do anything, we need to navigate the neural FTP monitor!", 34 },
                    { 21, new DateTime(2023, 6, 8, 11, 31, 30, 462, DateTimeKind.Utc).AddTicks(4788), 21, "If we index the program, we can get to the SSL program through the auxiliary SSL program!", 65 },
                    { 22, new DateTime(2023, 6, 8, 19, 29, 24, 302, DateTimeKind.Utc).AddTicks(8901), 15, "Try to parse the COM feed, maybe it will parse the neural feed!", 49 },
                    { 23, new DateTime(2023, 6, 9, 8, 33, 9, 227, DateTimeKind.Utc).AddTicks(2647), 22, "You can't index the alarm without navigating the multi-byte HDD alarm!", 57 },
                    { 24, new DateTime(2023, 6, 9, 7, 23, 3, 918, DateTimeKind.Utc).AddTicks(3198), 41, "If we program the hard drive, we can get to the XML hard drive through the bluetooth XML hard drive!", 48 },
                    { 25, new DateTime(2023, 6, 8, 19, 39, 45, 966, DateTimeKind.Utc).AddTicks(7822), 94, "If we synthesize the driver, we can get to the JSON driver through the primary JSON driver!", 75 },
                    { 26, new DateTime(2023, 6, 8, 16, 39, 4, 778, DateTimeKind.Utc).AddTicks(1554), 33, "If we reboot the alarm, we can get to the PCI alarm through the virtual PCI alarm!", 36 },
                    { 27, new DateTime(2023, 6, 9, 5, 23, 45, 166, DateTimeKind.Utc).AddTicks(8062), 1, "Use the auxiliary JBOD program, then you can program the auxiliary program!", 88 },
                    { 28, new DateTime(2023, 6, 9, 7, 5, 50, 875, DateTimeKind.Utc).AddTicks(4519), 65, "bypassing the interface won't do anything, we need to override the solid state AGP interface!", 67 },
                    { 29, new DateTime(2023, 6, 8, 16, 47, 2, 295, DateTimeKind.Utc).AddTicks(8242), 39, "Use the digital THX firewall, then you can parse the digital firewall!", 87 },
                    { 30, new DateTime(2023, 6, 9, 6, 2, 10, 857, DateTimeKind.Utc).AddTicks(7569), 50, "I'll copy the open-source USB feed, that should feed the USB feed!", 52 },
                    { 31, new DateTime(2023, 6, 8, 13, 53, 21, 831, DateTimeKind.Utc).AddTicks(9553), 100, "The ADP port is down, navigate the open-source port so we can navigate the ADP port!", 1 },
                    { 32, new DateTime(2023, 6, 8, 10, 7, 39, 569, DateTimeKind.Utc).AddTicks(5746), 52, "indexing the card won't do anything, we need to navigate the bluetooth SQL card!", 71 },
                    { 33, new DateTime(2023, 6, 9, 0, 7, 44, 236, DateTimeKind.Utc).AddTicks(5211), 73, "Try to quantify the AGP microchip, maybe it will quantify the online microchip!", 77 },
                    { 34, new DateTime(2023, 6, 9, 5, 37, 58, 276, DateTimeKind.Utc).AddTicks(875), 39, "Try to connect the IB protocol, maybe it will connect the auxiliary protocol!", 11 },
                    { 35, new DateTime(2023, 6, 9, 6, 36, 6, 238, DateTimeKind.Utc).AddTicks(492), 44, "I'll connect the redundant XML microchip, that should microchip the XML microchip!", 81 },
                    { 36, new DateTime(2023, 6, 9, 1, 10, 20, 662, DateTimeKind.Utc).AddTicks(4381), 27, "The USB alarm is down, compress the optical alarm so we can compress the USB alarm!", 53 },
                    { 37, new DateTime(2023, 6, 8, 21, 30, 26, 323, DateTimeKind.Utc).AddTicks(8180), 43, "The XML alarm is down, back up the redundant alarm so we can back up the XML alarm!", 9 },
                    { 38, new DateTime(2023, 6, 8, 19, 47, 28, 953, DateTimeKind.Utc).AddTicks(1280), 7, "The FTP bandwidth is down, navigate the haptic bandwidth so we can navigate the FTP bandwidth!", 81 },
                    { 39, new DateTime(2023, 6, 8, 17, 22, 2, 840, DateTimeKind.Utc).AddTicks(674), 46, "transmitting the panel won't do anything, we need to bypass the neural JBOD panel!", 76 },
                    { 40, new DateTime(2023, 6, 9, 0, 38, 10, 924, DateTimeKind.Utc).AddTicks(1259), 41, "The SDD microchip is down, quantify the online microchip so we can quantify the SDD microchip!", 33 },
                    { 41, new DateTime(2023, 6, 8, 15, 40, 59, 692, DateTimeKind.Utc).AddTicks(2628), 6, "You can't synthesize the protocol without calculating the optical SSL protocol!", 9 },
                    { 42, new DateTime(2023, 6, 9, 7, 5, 1, 831, DateTimeKind.Utc).AddTicks(2174), 23, "I'll copy the primary PCI pixel, that should pixel the PCI pixel!", 76 },
                    { 43, new DateTime(2023, 6, 9, 6, 56, 27, 506, DateTimeKind.Utc).AddTicks(5179), 67, "If we transmit the protocol, we can get to the HTTP protocol through the back-end HTTP protocol!", 86 },
                    { 44, new DateTime(2023, 6, 8, 21, 2, 51, 432, DateTimeKind.Utc).AddTicks(4377), 85, "If we navigate the circuit, we can get to the SMTP circuit through the haptic SMTP circuit!", 52 },
                    { 45, new DateTime(2023, 6, 8, 23, 21, 12, 71, DateTimeKind.Utc).AddTicks(9307), 42, "The SSL card is down, program the mobile card so we can program the SSL card!", 48 },
                    { 46, new DateTime(2023, 6, 9, 7, 7, 43, 454, DateTimeKind.Utc).AddTicks(6701), 45, "We need to copy the digital THX array!", 3 },
                    { 47, new DateTime(2023, 6, 8, 14, 2, 9, 521, DateTimeKind.Utc).AddTicks(7823), 7, "navigating the sensor won't do anything, we need to parse the redundant CSS sensor!", 40 },
                    { 48, new DateTime(2023, 6, 8, 16, 27, 2, 434, DateTimeKind.Utc).AddTicks(2726), 14, "Try to back up the TCP alarm, maybe it will back up the cross-platform alarm!", 53 },
                    { 49, new DateTime(2023, 6, 8, 16, 25, 9, 128, DateTimeKind.Utc).AddTicks(1690), 63, "The TCP sensor is down, connect the bluetooth sensor so we can connect the TCP sensor!", 55 },
                    { 50, new DateTime(2023, 6, 8, 15, 24, 40, 521, DateTimeKind.Utc).AddTicks(3816), 70, "The SMS firewall is down, program the haptic firewall so we can program the SMS firewall!", 70 },
                    { 51, new DateTime(2023, 6, 9, 2, 11, 39, 742, DateTimeKind.Utc).AddTicks(668), 7, "The COM panel is down, reboot the virtual panel so we can reboot the COM panel!", 97 },
                    { 52, new DateTime(2023, 6, 8, 23, 59, 35, 104, DateTimeKind.Utc).AddTicks(7540), 74, "Try to reboot the USB array, maybe it will reboot the multi-byte array!", 11 },
                    { 53, new DateTime(2023, 6, 8, 17, 58, 56, 558, DateTimeKind.Utc).AddTicks(6853), 42, "Use the cross-platform SAS transmitter, then you can generate the cross-platform transmitter!", 73 },
                    { 54, new DateTime(2023, 6, 9, 1, 40, 30, 504, DateTimeKind.Utc).AddTicks(8253), 19, "You can't input the bandwidth without parsing the primary HTTP bandwidth!", 82 },
                    { 55, new DateTime(2023, 6, 8, 10, 38, 7, 633, DateTimeKind.Utc).AddTicks(9491), 20, "The EXE bus is down, navigate the open-source bus so we can navigate the EXE bus!", 34 },
                    { 56, new DateTime(2023, 6, 8, 17, 2, 42, 0, DateTimeKind.Utc).AddTicks(4401), 82, "I'll calculate the bluetooth ADP card, that should card the ADP card!", 47 },
                    { 57, new DateTime(2023, 6, 8, 23, 7, 38, 879, DateTimeKind.Utc).AddTicks(7346), 27, "Use the mobile AGP application, then you can synthesize the mobile application!", 5 },
                    { 58, new DateTime(2023, 6, 8, 20, 59, 14, 25, DateTimeKind.Utc).AddTicks(7918), 29, "I'll calculate the primary ADP array, that should array the ADP array!", 76 },
                    { 59, new DateTime(2023, 6, 8, 15, 42, 17, 836, DateTimeKind.Utc).AddTicks(7758), 49, "If we hack the capacitor, we can get to the EXE capacitor through the haptic EXE capacitor!", 34 },
                    { 60, new DateTime(2023, 6, 8, 19, 33, 2, 362, DateTimeKind.Utc).AddTicks(6246), 29, "You can't copy the alarm without synthesizing the back-end SQL alarm!", 88 },
                    { 61, new DateTime(2023, 6, 9, 1, 48, 34, 442, DateTimeKind.Utc).AddTicks(168), 64, "Use the multi-byte AI array, then you can transmit the multi-byte array!", 35 },
                    { 62, new DateTime(2023, 6, 9, 8, 16, 19, 766, DateTimeKind.Utc).AddTicks(4280), 43, "backing up the panel won't do anything, we need to compress the solid state TCP panel!", 91 },
                    { 63, new DateTime(2023, 6, 9, 1, 56, 4, 644, DateTimeKind.Utc).AddTicks(8266), 56, "backing up the port won't do anything, we need to copy the bluetooth SMTP port!", 70 },
                    { 64, new DateTime(2023, 6, 9, 5, 34, 37, 611, DateTimeKind.Utc).AddTicks(7052), 80, "If we index the bus, we can get to the PNG bus through the online PNG bus!", 94 },
                    { 65, new DateTime(2023, 6, 9, 4, 33, 50, 850, DateTimeKind.Utc).AddTicks(2289), 12, "The XSS program is down, bypass the open-source program so we can bypass the XSS program!", 69 },
                    { 66, new DateTime(2023, 6, 8, 19, 40, 59, 615, DateTimeKind.Utc).AddTicks(4345), 11, "Try to reboot the AGP capacitor, maybe it will reboot the multi-byte capacitor!", 90 },
                    { 67, new DateTime(2023, 6, 8, 18, 21, 39, 214, DateTimeKind.Utc).AddTicks(7506), 53, "The PNG panel is down, program the back-end panel so we can program the PNG panel!", 94 },
                    { 68, new DateTime(2023, 6, 8, 23, 40, 26, 599, DateTimeKind.Utc).AddTicks(172), 87, "Use the open-source AI interface, then you can override the open-source interface!", 25 },
                    { 69, new DateTime(2023, 6, 8, 18, 28, 22, 296, DateTimeKind.Utc).AddTicks(6635), 85, "Try to bypass the SSL feed, maybe it will bypass the virtual feed!", 40 },
                    { 70, new DateTime(2023, 6, 8, 11, 15, 40, 883, DateTimeKind.Utc).AddTicks(3013), 95, "We need to input the online HDD hard drive!", 66 },
                    { 71, new DateTime(2023, 6, 8, 22, 31, 23, 400, DateTimeKind.Utc).AddTicks(4922), 84, "Use the 1080p SDD alarm, then you can program the 1080p alarm!", 3 },
                    { 72, new DateTime(2023, 6, 8, 22, 6, 51, 546, DateTimeKind.Utc).AddTicks(5021), 59, "The USB panel is down, input the haptic panel so we can input the USB panel!", 2 },
                    { 73, new DateTime(2023, 6, 8, 14, 5, 47, 465, DateTimeKind.Utc).AddTicks(949), 86, "You can't quantify the feed without bypassing the primary XML feed!", 56 },
                    { 74, new DateTime(2023, 6, 8, 16, 3, 35, 893, DateTimeKind.Utc).AddTicks(8945), 82, "Use the cross-platform AGP hard drive, then you can quantify the cross-platform hard drive!", 3 },
                    { 75, new DateTime(2023, 6, 8, 21, 21, 25, 269, DateTimeKind.Utc).AddTicks(1705), 89, "If we generate the array, we can get to the USB array through the mobile USB array!", 27 },
                    { 76, new DateTime(2023, 6, 9, 2, 5, 41, 775, DateTimeKind.Utc).AddTicks(8359), 36, "Use the primary SMS bus, then you can reboot the primary bus!", 74 },
                    { 77, new DateTime(2023, 6, 8, 22, 4, 56, 773, DateTimeKind.Utc).AddTicks(8251), 23, "I'll copy the redundant AI hard drive, that should hard drive the AI hard drive!", 20 },
                    { 78, new DateTime(2023, 6, 9, 5, 31, 13, 243, DateTimeKind.Utc).AddTicks(1334), 41, "calculating the matrix won't do anything, we need to synthesize the optical SAS matrix!", 70 },
                    { 79, new DateTime(2023, 6, 9, 0, 23, 36, 406, DateTimeKind.Utc).AddTicks(15), 68, "Use the multi-byte RAM alarm, then you can bypass the multi-byte alarm!", 92 },
                    { 80, new DateTime(2023, 6, 8, 16, 57, 1, 279, DateTimeKind.Utc).AddTicks(3247), 4, "Use the virtual PCI microchip, then you can back up the virtual microchip!", 52 },
                    { 81, new DateTime(2023, 6, 8, 8, 45, 2, 933, DateTimeKind.Utc).AddTicks(1712), 37, "Try to generate the SMS array, maybe it will generate the optical array!", 47 },
                    { 82, new DateTime(2023, 6, 9, 6, 18, 24, 947, DateTimeKind.Utc).AddTicks(1536), 67, "Use the optical HDD bus, then you can hack the optical bus!", 33 },
                    { 83, new DateTime(2023, 6, 8, 23, 18, 4, 540, DateTimeKind.Utc).AddTicks(161), 29, "Use the mobile PCI protocol, then you can index the mobile protocol!", 35 },
                    { 84, new DateTime(2023, 6, 8, 22, 2, 28, 922, DateTimeKind.Utc).AddTicks(4715), 95, "I'll transmit the primary GB panel, that should panel the GB panel!", 91 },
                    { 85, new DateTime(2023, 6, 8, 13, 3, 29, 967, DateTimeKind.Utc).AddTicks(8530), 12, "I'll navigate the primary HDD bandwidth, that should bandwidth the HDD bandwidth!", 74 },
                    { 86, new DateTime(2023, 6, 9, 6, 10, 9, 276, DateTimeKind.Utc).AddTicks(7006), 57, "I'll index the online HTTP sensor, that should sensor the HTTP sensor!", 12 },
                    { 87, new DateTime(2023, 6, 9, 8, 20, 34, 510, DateTimeKind.Utc).AddTicks(7532), 46, "The GB bandwidth is down, bypass the redundant bandwidth so we can bypass the GB bandwidth!", 1 },
                    { 88, new DateTime(2023, 6, 9, 5, 57, 56, 697, DateTimeKind.Utc).AddTicks(7970), 15, "I'll compress the back-end SQL sensor, that should sensor the SQL sensor!", 74 },
                    { 89, new DateTime(2023, 6, 8, 14, 40, 28, 4, DateTimeKind.Utc).AddTicks(6165), 32, "I'll calculate the neural HTTP microchip, that should microchip the HTTP microchip!", 10 },
                    { 90, new DateTime(2023, 6, 9, 3, 10, 26, 192, DateTimeKind.Utc).AddTicks(4383), 31, "You can't compress the program without calculating the online ADP program!", 21 },
                    { 91, new DateTime(2023, 6, 8, 10, 37, 56, 900, DateTimeKind.Utc).AddTicks(6091), 57, "calculating the monitor won't do anything, we need to bypass the wireless PNG monitor!", 63 },
                    { 92, new DateTime(2023, 6, 8, 10, 11, 22, 15, DateTimeKind.Utc).AddTicks(9458), 24, "We need to generate the multi-byte XSS sensor!", 91 },
                    { 93, new DateTime(2023, 6, 9, 3, 42, 39, 448, DateTimeKind.Utc).AddTicks(6779), 96, "The TCP system is down, reboot the 1080p system so we can reboot the TCP system!", 99 },
                    { 94, new DateTime(2023, 6, 8, 21, 31, 56, 620, DateTimeKind.Utc).AddTicks(1998), 89, "If we compress the application, we can get to the THX application through the multi-byte THX application!", 94 },
                    { 95, new DateTime(2023, 6, 8, 22, 44, 21, 201, DateTimeKind.Utc).AddTicks(6916), 59, "If we bypass the panel, we can get to the AI panel through the wireless AI panel!", 28 },
                    { 96, new DateTime(2023, 6, 8, 13, 30, 35, 219, DateTimeKind.Utc).AddTicks(1928), 2, "You can't compress the sensor without hacking the mobile PNG sensor!", 84 },
                    { 97, new DateTime(2023, 6, 8, 14, 35, 33, 529, DateTimeKind.Utc).AddTicks(5074), 40, "The PCI alarm is down, synthesize the bluetooth alarm so we can synthesize the PCI alarm!", 26 },
                    { 98, new DateTime(2023, 6, 8, 17, 1, 14, 290, DateTimeKind.Utc).AddTicks(8304), 74, "The SSL sensor is down, transmit the bluetooth sensor so we can transmit the SSL sensor!", 10 },
                    { 99, new DateTime(2023, 6, 9, 3, 11, 22, 559, DateTimeKind.Utc).AddTicks(6960), 69, "Use the digital SMS application, then you can quantify the digital application!", 47 },
                    { 100, new DateTime(2023, 6, 9, 7, 32, 33, 456, DateTimeKind.Utc).AddTicks(4829), 13, "You can't hack the transmitter without backing up the digital XSS transmitter!", 24 }
                });

            migrationBuilder.InsertData(
                table: "Rating",
                columns: new[] { "Id", "GameId", "UserId", "Value" },
                values: new object[,]
                {
                    { 1, 41, 78, 3 },
                    { 2, 20, 24, 2 },
                    { 3, 88, 29, 4 },
                    { 4, 51, 9, 2 },
                    { 5, 81, 16, 3 },
                    { 6, 22, 8, 2 },
                    { 7, 66, 55, 2 },
                    { 8, 75, 17, 4 },
                    { 9, 32, 78, 4 },
                    { 10, 44, 27, 2 },
                    { 11, 58, 73, 2 },
                    { 12, 68, 84, 4 },
                    { 13, 53, 24, 2 },
                    { 14, 92, 72, 1 },
                    { 15, 2, 18, 5 },
                    { 16, 8, 62, 1 },
                    { 17, 6, 29, 3 },
                    { 18, 14, 8, 4 },
                    { 19, 23, 30, 4 },
                    { 20, 44, 54, 4 },
                    { 21, 63, 13, 5 },
                    { 22, 14, 83, 2 },
                    { 23, 12, 82, 5 },
                    { 24, 54, 35, 5 },
                    { 25, 20, 28, 1 },
                    { 26, 25, 38, 4 },
                    { 27, 95, 87, 4 },
                    { 28, 83, 58, 1 },
                    { 29, 24, 88, 4 },
                    { 30, 31, 13, 5 },
                    { 31, 91, 37, 5 },
                    { 32, 95, 8, 4 },
                    { 33, 62, 13, 2 },
                    { 34, 53, 18, 5 },
                    { 35, 4, 41, 4 },
                    { 36, 45, 3, 4 },
                    { 37, 75, 38, 5 },
                    { 38, 78, 91, 4 },
                    { 39, 39, 2, 4 },
                    { 40, 7, 65, 2 },
                    { 41, 6, 93, 5 },
                    { 42, 10, 62, 5 },
                    { 43, 13, 65, 5 },
                    { 44, 37, 42, 3 },
                    { 45, 96, 48, 4 },
                    { 46, 40, 63, 5 },
                    { 47, 16, 38, 5 },
                    { 48, 50, 66, 4 },
                    { 49, 26, 25, 1 },
                    { 50, 14, 22, 4 },
                    { 51, 67, 12, 3 },
                    { 52, 27, 18, 1 },
                    { 53, 35, 96, 2 },
                    { 54, 100, 8, 1 },
                    { 55, 56, 95, 1 },
                    { 56, 85, 69, 5 },
                    { 57, 62, 76, 2 },
                    { 58, 47, 21, 4 },
                    { 59, 91, 70, 3 },
                    { 60, 11, 59, 3 },
                    { 61, 84, 85, 2 },
                    { 62, 27, 22, 3 },
                    { 63, 88, 88, 1 },
                    { 64, 31, 15, 4 },
                    { 65, 59, 29, 3 },
                    { 66, 74, 100, 2 },
                    { 67, 38, 55, 1 },
                    { 68, 12, 8, 4 },
                    { 69, 80, 87, 1 },
                    { 70, 19, 39, 4 },
                    { 71, 76, 99, 2 },
                    { 72, 60, 71, 1 },
                    { 73, 54, 44, 5 },
                    { 74, 97, 71, 1 },
                    { 75, 70, 33, 1 },
                    { 76, 47, 68, 4 },
                    { 77, 28, 76, 1 },
                    { 78, 49, 57, 2 },
                    { 79, 99, 41, 1 },
                    { 80, 9, 26, 3 },
                    { 81, 18, 78, 3 },
                    { 82, 91, 45, 1 },
                    { 83, 81, 91, 4 },
                    { 84, 67, 90, 3 },
                    { 85, 55, 98, 5 },
                    { 86, 72, 83, 3 },
                    { 87, 25, 24, 4 },
                    { 88, 41, 15, 1 },
                    { 89, 83, 95, 3 },
                    { 90, 34, 17, 3 },
                    { 91, 20, 58, 2 },
                    { 92, 34, 32, 4 },
                    { 93, 17, 28, 4 },
                    { 94, 97, 19, 3 },
                    { 95, 44, 37, 5 },
                    { 96, 51, 29, 4 },
                    { 97, 16, 40, 5 },
                    { 98, 71, 20, 3 },
                    { 99, 43, 16, 4 },
                    { 100, 4, 29, 2 }
                });

            migrationBuilder.InsertData(
                table: "UserGame",
                columns: new[] { "CreatedAt", "GameId", "UserId", "Score" },
                values: new object[,]
                {
                    { new DateTime(2023, 6, 9, 3, 29, 15, 269, DateTimeKind.Utc).AddTicks(3187), 5, 3, 6 },
                    { new DateTime(2023, 6, 8, 9, 39, 6, 96, DateTimeKind.Utc).AddTicks(5810), 52, 5, 10 },
                    { new DateTime(2023, 6, 9, 4, 47, 39, 792, DateTimeKind.Utc).AddTicks(8615), 89, 6, 3 },
                    { new DateTime(2023, 6, 9, 3, 5, 50, 129, DateTimeKind.Utc).AddTicks(4226), 69, 7, 5 },
                    { new DateTime(2023, 6, 8, 9, 42, 36, 728, DateTimeKind.Utc).AddTicks(676), 79, 9, 1 },
                    { new DateTime(2023, 6, 8, 17, 31, 10, 729, DateTimeKind.Utc).AddTicks(9015), 86, 9, 1 },
                    { new DateTime(2023, 6, 9, 2, 29, 42, 531, DateTimeKind.Utc).AddTicks(7052), 91, 9, 7 },
                    { new DateTime(2023, 6, 8, 10, 26, 52, 892, DateTimeKind.Utc).AddTicks(6041), 18, 13, 8 },
                    { new DateTime(2023, 6, 8, 23, 54, 15, 849, DateTimeKind.Utc).AddTicks(2857), 76, 15, 6 },
                    { new DateTime(2023, 6, 8, 19, 29, 11, 76, DateTimeKind.Utc).AddTicks(8059), 2, 16, 2 },
                    { new DateTime(2023, 6, 8, 14, 32, 14, 243, DateTimeKind.Utc).AddTicks(9215), 25, 16, 2 },
                    { new DateTime(2023, 6, 8, 23, 9, 55, 734, DateTimeKind.Utc).AddTicks(3003), 39, 16, 1 },
                    { new DateTime(2023, 6, 9, 8, 1, 19, 542, DateTimeKind.Utc).AddTicks(4792), 64, 16, 10 },
                    { new DateTime(2023, 6, 8, 13, 34, 13, 33, DateTimeKind.Utc).AddTicks(489), 15, 21, 8 },
                    { new DateTime(2023, 6, 8, 23, 20, 33, 894, DateTimeKind.Utc).AddTicks(4768), 36, 21, 10 },
                    { new DateTime(2023, 6, 9, 3, 21, 6, 869, DateTimeKind.Utc).AddTicks(7156), 18, 22, 2 },
                    { new DateTime(2023, 6, 8, 21, 31, 51, 146, DateTimeKind.Utc).AddTicks(792), 46, 24, 10 },
                    { new DateTime(2023, 6, 8, 12, 17, 46, 474, DateTimeKind.Utc).AddTicks(9601), 73, 25, 1 },
                    { new DateTime(2023, 6, 8, 9, 40, 46, 503, DateTimeKind.Utc).AddTicks(4017), 26, 26, 9 },
                    { new DateTime(2023, 6, 8, 19, 50, 8, 575, DateTimeKind.Utc).AddTicks(6753), 34, 26, 6 },
                    { new DateTime(2023, 6, 8, 11, 52, 22, 431, DateTimeKind.Utc).AddTicks(1618), 63, 26, 6 },
                    { new DateTime(2023, 6, 8, 23, 2, 9, 125, DateTimeKind.Utc).AddTicks(1803), 81, 26, 3 },
                    { new DateTime(2023, 6, 9, 0, 59, 23, 675, DateTimeKind.Utc).AddTicks(8045), 75, 27, 5 },
                    { new DateTime(2023, 6, 8, 22, 24, 55, 630, DateTimeKind.Utc).AddTicks(8950), 79, 29, 1 },
                    { new DateTime(2023, 6, 8, 23, 10, 28, 540, DateTimeKind.Utc).AddTicks(3621), 8, 30, 5 },
                    { new DateTime(2023, 6, 8, 13, 5, 59, 683, DateTimeKind.Utc).AddTicks(3528), 12, 30, 9 },
                    { new DateTime(2023, 6, 8, 9, 8, 12, 659, DateTimeKind.Utc).AddTicks(3097), 46, 30, 8 },
                    { new DateTime(2023, 6, 9, 3, 50, 52, 511, DateTimeKind.Utc).AddTicks(3256), 85, 30, 5 },
                    { new DateTime(2023, 6, 8, 23, 56, 10, 566, DateTimeKind.Utc).AddTicks(1121), 18, 31, 1 },
                    { new DateTime(2023, 6, 8, 16, 14, 13, 471, DateTimeKind.Utc).AddTicks(1108), 64, 31, 6 },
                    { new DateTime(2023, 6, 8, 11, 4, 47, 136, DateTimeKind.Utc).AddTicks(6618), 72, 31, 6 },
                    { new DateTime(2023, 6, 8, 19, 34, 26, 289, DateTimeKind.Utc).AddTicks(5363), 13, 32, 3 },
                    { new DateTime(2023, 6, 8, 15, 28, 50, 450, DateTimeKind.Utc).AddTicks(4423), 99, 33, 10 },
                    { new DateTime(2023, 6, 8, 21, 48, 34, 512, DateTimeKind.Utc).AddTicks(1602), 5, 34, 3 },
                    { new DateTime(2023, 6, 8, 13, 43, 36, 645, DateTimeKind.Utc).AddTicks(9629), 53, 34, 5 },
                    { new DateTime(2023, 6, 8, 17, 54, 18, 315, DateTimeKind.Utc).AddTicks(9969), 93, 35, 1 },
                    { new DateTime(2023, 6, 9, 4, 40, 26, 581, DateTimeKind.Utc).AddTicks(7455), 36, 37, 9 },
                    { new DateTime(2023, 6, 9, 4, 16, 36, 535, DateTimeKind.Utc).AddTicks(9761), 89, 39, 1 },
                    { new DateTime(2023, 6, 9, 4, 36, 54, 548, DateTimeKind.Utc).AddTicks(2094), 75, 40, 8 },
                    { new DateTime(2023, 6, 8, 21, 15, 42, 451, DateTimeKind.Utc).AddTicks(7925), 9, 41, 6 },
                    { new DateTime(2023, 6, 9, 5, 15, 16, 386, DateTimeKind.Utc).AddTicks(6949), 30, 44, 2 },
                    { new DateTime(2023, 6, 8, 23, 45, 18, 99, DateTimeKind.Utc).AddTicks(591), 82, 44, 7 },
                    { new DateTime(2023, 6, 9, 8, 26, 14, 44, DateTimeKind.Utc).AddTicks(9915), 10, 45, 1 },
                    { new DateTime(2023, 6, 8, 9, 5, 36, 399, DateTimeKind.Utc).AddTicks(9382), 79, 45, 7 },
                    { new DateTime(2023, 6, 8, 14, 12, 55, 992, DateTimeKind.Utc).AddTicks(9294), 46, 46, 1 },
                    { new DateTime(2023, 6, 8, 23, 45, 38, 811, DateTimeKind.Utc).AddTicks(545), 90, 46, 1 },
                    { new DateTime(2023, 6, 8, 16, 4, 0, 975, DateTimeKind.Utc).AddTicks(9017), 59, 47, 3 },
                    { new DateTime(2023, 6, 8, 20, 22, 3, 782, DateTimeKind.Utc).AddTicks(2296), 75, 47, 5 },
                    { new DateTime(2023, 6, 9, 0, 3, 32, 850, DateTimeKind.Utc).AddTicks(7854), 59, 49, 5 },
                    { new DateTime(2023, 6, 8, 23, 29, 16, 425, DateTimeKind.Utc).AddTicks(4614), 7, 50, 6 },
                    { new DateTime(2023, 6, 8, 11, 44, 21, 37, DateTimeKind.Utc).AddTicks(460), 22, 51, 1 },
                    { new DateTime(2023, 6, 9, 2, 4, 29, 158, DateTimeKind.Utc).AddTicks(2085), 30, 53, 4 },
                    { new DateTime(2023, 6, 8, 22, 7, 24, 489, DateTimeKind.Utc).AddTicks(8370), 49, 53, 4 },
                    { new DateTime(2023, 6, 8, 18, 15, 55, 85, DateTimeKind.Utc).AddTicks(582), 30, 55, 6 },
                    { new DateTime(2023, 6, 8, 19, 31, 2, 806, DateTimeKind.Utc).AddTicks(6191), 30, 57, 7 },
                    { new DateTime(2023, 6, 8, 9, 26, 36, 933, DateTimeKind.Utc).AddTicks(7337), 37, 57, 7 },
                    { new DateTime(2023, 6, 8, 9, 31, 17, 176, DateTimeKind.Utc).AddTicks(6748), 89, 58, 7 },
                    { new DateTime(2023, 6, 9, 6, 36, 16, 874, DateTimeKind.Utc).AddTicks(3076), 62, 60, 10 },
                    { new DateTime(2023, 6, 8, 10, 24, 3, 512, DateTimeKind.Utc).AddTicks(5775), 23, 61, 1 },
                    { new DateTime(2023, 6, 8, 15, 1, 31, 680, DateTimeKind.Utc).AddTicks(669), 8, 62, 7 },
                    { new DateTime(2023, 6, 8, 20, 16, 5, 971, DateTimeKind.Utc).AddTicks(1600), 54, 62, 4 },
                    { new DateTime(2023, 6, 8, 20, 55, 54, 770, DateTimeKind.Utc).AddTicks(3515), 10, 63, 3 },
                    { new DateTime(2023, 6, 9, 7, 36, 46, 595, DateTimeKind.Utc).AddTicks(9027), 55, 64, 5 },
                    { new DateTime(2023, 6, 8, 20, 46, 52, 568, DateTimeKind.Utc).AddTicks(7532), 91, 67, 4 },
                    { new DateTime(2023, 6, 9, 7, 0, 5, 835, DateTimeKind.Utc).AddTicks(2991), 97, 70, 9 },
                    { new DateTime(2023, 6, 8, 10, 37, 52, 659, DateTimeKind.Utc).AddTicks(2931), 28, 71, 2 },
                    { new DateTime(2023, 6, 8, 20, 50, 12, 286, DateTimeKind.Utc).AddTicks(4122), 46, 71, 2 },
                    { new DateTime(2023, 6, 8, 12, 58, 28, 132, DateTimeKind.Utc).AddTicks(453), 71, 72, 10 },
                    { new DateTime(2023, 6, 8, 11, 4, 12, 754, DateTimeKind.Utc).AddTicks(2025), 44, 74, 4 },
                    { new DateTime(2023, 6, 8, 10, 59, 36, 619, DateTimeKind.Utc).AddTicks(1552), 82, 75, 6 },
                    { new DateTime(2023, 6, 8, 23, 22, 4, 251, DateTimeKind.Utc).AddTicks(5359), 38, 77, 8 },
                    { new DateTime(2023, 6, 9, 2, 54, 37, 148, DateTimeKind.Utc).AddTicks(4501), 37, 78, 1 },
                    { new DateTime(2023, 6, 8, 9, 9, 44, 198, DateTimeKind.Utc).AddTicks(5728), 61, 78, 9 },
                    { new DateTime(2023, 6, 8, 23, 43, 48, 986, DateTimeKind.Utc).AddTicks(441), 62, 78, 4 },
                    { new DateTime(2023, 6, 8, 20, 44, 19, 650, DateTimeKind.Utc).AddTicks(1925), 24, 79, 1 },
                    { new DateTime(2023, 6, 8, 12, 1, 8, 314, DateTimeKind.Utc).AddTicks(8214), 13, 81, 1 },
                    { new DateTime(2023, 6, 9, 8, 41, 11, 772, DateTimeKind.Utc).AddTicks(8255), 14, 81, 5 },
                    { new DateTime(2023, 6, 9, 3, 16, 39, 12, DateTimeKind.Utc).AddTicks(7181), 18, 81, 7 },
                    { new DateTime(2023, 6, 8, 13, 15, 26, 398, DateTimeKind.Utc).AddTicks(6985), 12, 82, 4 },
                    { new DateTime(2023, 6, 8, 14, 46, 44, 946, DateTimeKind.Utc).AddTicks(8398), 71, 82, 8 },
                    { new DateTime(2023, 6, 9, 3, 13, 36, 84, DateTimeKind.Utc).AddTicks(1116), 21, 83, 7 },
                    { new DateTime(2023, 6, 8, 10, 2, 18, 869, DateTimeKind.Utc).AddTicks(7584), 53, 83, 9 },
                    { new DateTime(2023, 6, 8, 15, 7, 52, 733, DateTimeKind.Utc).AddTicks(4201), 48, 86, 5 },
                    { new DateTime(2023, 6, 8, 16, 10, 4, 929, DateTimeKind.Utc).AddTicks(9296), 100, 86, 4 },
                    { new DateTime(2023, 6, 8, 19, 35, 26, 984, DateTimeKind.Utc).AddTicks(8609), 43, 87, 8 },
                    { new DateTime(2023, 6, 8, 22, 40, 7, 772, DateTimeKind.Utc).AddTicks(9555), 71, 87, 3 },
                    { new DateTime(2023, 6, 8, 10, 35, 32, 679, DateTimeKind.Utc).AddTicks(8860), 70, 89, 10 },
                    { new DateTime(2023, 6, 9, 7, 20, 58, 849, DateTimeKind.Utc).AddTicks(1404), 18, 90, 7 },
                    { new DateTime(2023, 6, 9, 1, 26, 35, 175, DateTimeKind.Utc).AddTicks(6778), 68, 91, 1 },
                    { new DateTime(2023, 6, 8, 23, 36, 14, 165, DateTimeKind.Utc).AddTicks(1670), 98, 91, 6 },
                    { new DateTime(2023, 6, 9, 7, 45, 0, 846, DateTimeKind.Utc).AddTicks(69), 27, 92, 7 },
                    { new DateTime(2023, 6, 9, 8, 29, 45, 227, DateTimeKind.Utc).AddTicks(5399), 88, 92, 8 },
                    { new DateTime(2023, 6, 8, 19, 8, 21, 746, DateTimeKind.Utc).AddTicks(8986), 30, 93, 9 },
                    { new DateTime(2023, 6, 8, 13, 33, 57, 844, DateTimeKind.Utc).AddTicks(7993), 51, 94, 3 },
                    { new DateTime(2023, 6, 8, 17, 39, 18, 460, DateTimeKind.Utc).AddTicks(3048), 17, 95, 4 },
                    { new DateTime(2023, 6, 8, 12, 44, 24, 961, DateTimeKind.Utc).AddTicks(2586), 20, 95, 8 },
                    { new DateTime(2023, 6, 9, 1, 49, 13, 647, DateTimeKind.Utc).AddTicks(8411), 22, 96, 3 },
                    { new DateTime(2023, 6, 8, 9, 52, 42, 26, DateTimeKind.Utc).AddTicks(491), 76, 96, 4 },
                    { new DateTime(2023, 6, 8, 22, 19, 4, 239, DateTimeKind.Utc).AddTicks(936), 12, 98, 6 },
                    { new DateTime(2023, 6, 8, 12, 25, 31, 758, DateTimeKind.Utc).AddTicks(4535), 64, 99, 4 }
                });

            migrationBuilder.CreateIndex(
                name: "IX_Comment_GameId",
                table: "Comment",
                column: "GameId");

            migrationBuilder.CreateIndex(
                name: "IX_Comment_UserId",
                table: "Comment",
                column: "UserId");

            migrationBuilder.CreateIndex(
                name: "IX_Game_CategoryId",
                table: "Game",
                column: "CategoryId");

            migrationBuilder.CreateIndex(
                name: "IX_Rating_GameId",
                table: "Rating",
                column: "GameId");

            migrationBuilder.CreateIndex(
                name: "IX_Rating_UserId",
                table: "Rating",
                column: "UserId");

            migrationBuilder.CreateIndex(
                name: "IX_UserGame_GameId",
                table: "UserGame",
                column: "GameId");
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropTable(
                name: "Comment");

            migrationBuilder.DropTable(
                name: "Rating");

            migrationBuilder.DropTable(
                name: "UserGame");

            migrationBuilder.DropTable(
                name: "Game");

            migrationBuilder.DropTable(
                name: "User");

            migrationBuilder.DropTable(
                name: "Category");
        }
    }
}
